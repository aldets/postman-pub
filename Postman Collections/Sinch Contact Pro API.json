{
	"info": {
		"_postman_id": "289934b7-62b1-494d-8f5f-85552decc22e",
		"name": "Sinch Contact Pro API",
		"description": "This is a collection for Sinch Contact Pro On-Premise API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9823052"
	},
	"item": [
		{
			"name": "FP19",
			"item": [
				{
					"name": "Analytics Interface",
					"item": [
						{
							"name": "agentHistory",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/agentHistory?startTime=&endTime=",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"agentHistory"
									],
									"query": [
										{
											"key": "startTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										},
										{
											"key": "endTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "agentStatistics",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/agentStatistics?startTime",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"agentStatistics"
									],
									"query": [
										{
											"key": "startTime",
											"value": null,
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "agentStatus",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/agentStatus?startTime",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"agentStatus"
									],
									"query": [
										{
											"key": "startTime",
											"value": null,
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "agentStatusHistory",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/agentStatusHistory?startTime=",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"agentStatusHistory"
									],
									"query": [
										{
											"key": "startTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "contactHistory",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/contactHistory?startTime=&endTime",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"contactHistory"
									],
									"query": [
										{
											"key": "startTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										},
										{
											"key": "endTime",
											"value": null,
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "contactStatistic",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/contactStatistic?startTime=",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"contactStatistic"
									],
									"query": [
										{
											"key": "startTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/RAI.html](https://docs.cc.sinch.com/onpremise/fp19/api/RAI.html#)"
				},
				{
					"name": "Configuration Interface",
					"item": [
						{
							"name": "Audio Prompts",
							"item": [
								{
									"name": "{audioPromptId}",
									"item": [
										{
											"name": "GET Audio Prompt with audioPromptId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/audioPrompts/{{audioPromptId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"audioPrompts",
														"{{audioPromptId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Audio Prompts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/audioPrompts",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"audioPrompts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CP Extensions",
							"item": [
								{
									"name": "{cpExtensionId}",
									"item": [
										{
											"name": "GET CP Extension with cpExtensionId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/cpExtension/{{cpExtensionId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"cpExtension",
														"{{cpExtensionId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET CP Extensions",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/cpExtensions",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"cpExtensions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Custom IVRs",
							"item": [
								{
									"name": "{customIvrId}",
									"item": [
										{
											"name": "Attributes",
											"item": [
												{
													"name": "GET Attributes with customIvrId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"attributes"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Attributes",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Name\",\r\n    \"language\": \"EN\",\r\n    \"value\": \"Advanced\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"attributes"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Current Source Code Version",
											"item": [
												{
													"name": "GET Current Source Code Version with customIvrId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/currentSourceCodeVersion",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"currentSourceCodeVersion"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Source Codes",
											"item": [
												{
													"name": "{sourceCodeId}",
													"item": [
														{
															"name": "GET Source Code with sourceCodeId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/sourceCodes/{{sourceCodeId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"customIvrs",
																		"{{customIvrId}}",
																		"sourceCodes",
																		"{{sourceCodeId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Source Codes with customIvrId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/sourceCodes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"sourceCodes"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Custom IVR with customIvrId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"customIvrs",
														"{{customIvrId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Custom IVRs",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"customIvrs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Disruption Sets",
							"item": [
								{
									"name": "{disruptionSetId}",
									"item": [
										{
											"name": "Events",
											"item": [
												{
													"name": "{eventId}",
													"item": [
														{
															"name": "GET Disruption Set Event with eventId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events/{{eventId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"{{disruptionSetId}}",
																		"events",
																		"{{eventId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "POST New Event with eventId",
															"request": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events/{{eventId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"{{disruptionSetId}}",
																		"events",
																		"{{eventId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Event with eventId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events/{{eventId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"{{disruptionSetId}}",
																		"events",
																		"{{eventId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Bulk",
													"item": [
														{
															"name": "DELETE Event Bulk",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/events/bulk",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"events",
																		"bulk"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Events with disruptionSetId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"disruptionSets",
																"{{disruptionSetId}}",
																"events"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Event with disruptionSetId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"activeFrom\": \"string\",\r\n  \"activeTo\": \"string\",\r\n  \"items\": {\r\n      \"item\": [\r\n          {\r\n              \"id\": \"string\"\r\n          },\r\n          {\r\n              \"id\": \"string\"\r\n          },\r\n          {\r\n              \"id\": \"string\"\r\n          }\r\n      ]\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"disruptionSets",
																"{{disruptionSetId}}",
																"events"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Items",
											"item": [
												{
													"name": "{itemId}",
													"item": [
														{
															"name": "GET Disruption Set Item with itemId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/items/{{itemId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"{{disruptionSetId}}",
																		"items",
																		"{{itemId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Items with disruptionSetId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/items",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"disruptionSets",
																"{{disruptionSetId}}",
																"items"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Disruption Set with disruptionSetId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"disruptionSets",
														"{{disruptionSetId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Disruption Sets",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"disruptionSets"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Messaging Services",
							"item": [
								{
									"name": "{messagingServiceId}",
									"item": [
										{
											"name": "Authentications",
											"item": [
												{
													"name": "{authenticationId}",
													"item": [
														{
															"name": "GET Messaging Service Authentication with authenticationId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications/{{authenticationId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"messagingServices",
																		"{{messagingServiceId}}",
																		"authentications",
																		"{{authenticationId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update Messaging Service Authentication with authenticationId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications/{{authenticationId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"messagingServices",
																		"{{messagingServiceId}}",
																		"authentications",
																		"{{authenticationId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Messaging Service Authentication with authenticationId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications/{{authenticationId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"messagingServices",
																		"{{messagingServiceId}}",
																		"authentications",
																		"{{authenticationId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Authentications with messagingServiceId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"messagingServices",
																"{{messagingServiceId}}",
																"authentications"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Authentication with messagingServiceId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"authenticationId\":\"string\",\r\n   \"password\":\"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"messagingServices",
																"{{messagingServiceId}}",
																"authentications"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Messaging Service with messagingServiceId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"messagingServices",
														"{{messagingServiceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Messaging Service with messagingServiceId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"messagingServices",
														"{{messagingServiceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Messaging Service with messagingServiceId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"messagingServices",
														"{{messagingServiceId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Messaging Services",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"messagingServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Messaging Service",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"facebook\",\r\n  \"name\": \"Facebook connection\",\r\n  \"connection\": \"https://serviceaddress/\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"messagingServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Presence Profiles",
							"item": [
								{
									"name": "{prsProfileId}",
									"item": [
										{
											"name": "GET Presence Profile with prsProfileId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/prsProfiles/{{prsProfileId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"prsProfiles",
														"{{prsProfileId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Presence Profiles",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/prsProfiles",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"prsProfiles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queues",
							"item": [
								{
									"name": "{queueId}",
									"item": [
										{
											"name": "Attributes",
											"item": [
												{
													"name": "GET Queue Attributes with queueId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"attributes"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Queue Attributes with queueId",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"attributes"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Extensions",
											"item": [
												{
													"name": "{extensionId}",
													"item": [
														{
															"name": "GET Queue Extension with extensionId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions/{{extensionId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"extensions",
																		"{{extensionId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update Queue Extension with extensionId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions/{{extensionId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"extensions",
																		"{{extensionId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Queue Extension with extensionId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions/{{extensionId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"extensions",
																		"{{extensionId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Queue Extensions with queueId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"extensions"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Queue Extensions with queueId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"address\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"extensions"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Queue Groups",
											"item": [
												{
													"name": "{queueGroupId}",
													"item": [
														{
															"name": "GET Queue Group with queueGroupId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/queueGroups/{{queueGroupId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"queueGroups",
																		"{{queueGroupId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Queue Group with queueGroupId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/queueGroups/{{queueGroupId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"queueGroups",
																		"{{queueGroupId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Queue Groups with queueId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/queueGroups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"queueGroups"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST Queue Group with queueId",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/queueGroups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"queueGroups"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Queue with queueId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queues",
														"{{queueId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Queue with queueId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queues",
														"{{queueId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Queue with queueId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queues",
														"{{queueId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Queues",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"queues"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Queue",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"string\",\r\n  \"name\":  \"string\",\r\n  \"description\": \"string\",\r\n  \"loginType\": \"string\",\r\n  \"synchronised\": true,\r\n  \"forwardNumber\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"queues"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queue Groups",
							"item": [
								{
									"name": "{queueGroupId}",
									"item": [
										{
											"name": "Attributes",
											"item": [
												{
													"name": "GET Queue Group Attributes with queueGroupId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queueGroups",
																"{{queueGroupId}}",
																"attributes"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Queue Group Attributes with queueGroupId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"string\",\r\n    \"language\": \"string\",\r\n    \"value\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queueGroups",
																"{{queueGroupId}}",
																"attributes"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Queues",
											"item": [
												{
													"name": "{queueId}",
													"item": [
														{
															"name": "GET Queue Group Queue with queueId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/queues/{{queueId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queueGroups",
																		"{{queueGroupId}}",
																		"queues",
																		"{{queueId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Queue Group Queue with queueId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/queues/{{queueId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queueGroups",
																		"{{queueGroupId}}",
																		"queues",
																		"{{queueId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Queue Group Queues with queueGroupId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/queues",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queueGroups",
																"{{queueGroupId}}",
																"queues"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Queue to Queue Group with queueGroupId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/queues",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queueGroups",
																"{{queueGroupId}}",
																"queues"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Queue Groups with queueGroupId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queueGroups",
														"{{queueGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Queue Group with queueGroupId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queueGroups",
														"{{queueGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Queue Group with queueGroupId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queueGroups",
														"{{queueGroupId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Queue Groups",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"queueGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Queue Group",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"name\": \"string\",\r\n    \"description\": \"string\"\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"queueGroups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reply Templates",
							"item": [
								{
									"name": "{replyTemplateId}",
									"item": [
										{
											"name": "Attachments",
											"item": [
												{
													"name": "{attachmentId}",
													"item": [
														{
															"name": "GET Reply Template Attachment with attachmentId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/replyTemplates/{{replyTemplateId}}/attachments/{{attachmentId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"replyTemplates",
																		"{{replyTemplateId}}",
																		"attachments",
																		"{{attachmentId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Reply Template Attachments with replayTemplateId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/replyTemplates/{{replyTemplateId}}/attachments",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"replyTemplates",
																"{{replyTemplateId}}",
																"attachments"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Reply Template with replyTemplateId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/replyTemplates/{{replyTemplateId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"replyTemplates",
														"{{replyTemplateId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Reply Templates",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/replyTemplates",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"replyTemplates"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Roles",
							"item": [
								{
									"name": "{roleId}",
									"item": [
										{
											"name": "Users",
											"item": [
												{
													"name": "{userId}",
													"item": [
														{
															"name": "GET Role User with userId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}/users/{{userId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"roles",
																		"{{roleId}}",
																		"users",
																		"{{userId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Role User with userId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}/users/{{userId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"roles",
																		"{{roleId}}",
																		"users",
																		"{{userId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Role Users with roleId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}/users",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"roles",
																"{{roleId}}",
																"users"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User with roleId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"surname\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}/users",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"roles",
																"{{roleId}}",
																"users"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Role with roleId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"roles",
														"{{roleId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Role with roleId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"roles",
														"{{roleId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Role with roleId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"roles",
														"{{roleId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Roles",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Role",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\":\"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"roles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Skills",
							"item": [
								{
									"name": "{skillId}",
									"item": [
										{
											"name": "GET Skill with skillId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills/{{skillId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"skills",
														"{{skillId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Skill with skillId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills/{{skillId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"skills",
														"{{skillId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Skill with skillId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills/{{skillId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"skills",
														"{{skillId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Skills",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"skills"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Skill",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"skills"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Timezones",
							"item": [
								{
									"name": "{timeZoneId}",
									"item": [
										{
											"name": "GET Timezone with timeZoneId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/timeZones/{{timeZoneId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"timeZones",
														"{{timeZoneId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Timezones",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/timeZones",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"timeZones"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Users",
							"item": [
								{
									"name": "{userId}",
									"item": [
										{
											"name": "Certificates",
											"item": [
												{
													"name": "{certificateId}",
													"item": [
														{
															"name": "GET Certificate with certificateId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/certificates/{{certificateId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"certificates",
																		"{{certificateId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Certificate with certificateId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/certificates/{{certificateId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"certificates",
																		"{{certificateId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User Certificates with userId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/certificates",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"certificates"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Certificate with userId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\"subject\":\"string\",\r\n\"issuer\":\"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/certificates",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"certificates"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Roles",
											"item": [
												{
													"name": "{roleId}",
													"item": [
														{
															"name": "GET User Role with roleId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/roles/{{roleId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"roles",
																		"{{roleId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE User Role with roleId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/roles/{{roleId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"roles",
																		"{{roleId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User Roles with userId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/roles",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"roles"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Role with userId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\":\"string\",\r\n    \"name\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/roles",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"roles"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Skills",
											"item": [
												{
													"name": "{skillId}",
													"item": [
														{
															"name": "GET User Skill with skillId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills/{{skillId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"skills",
																		"{{skillId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update User Skill with skillId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills/{{skillId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"skills",
																		"{{skillId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE User Skill with skillId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills/{{skillId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"skills",
																		"{{skillId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User Skills with userId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"skills"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Skill with userId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\":\"string\",\r\n    \"value\": 2\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"skills"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "User Groups",
											"item": [
												{
													"name": "{userGroupId}",
													"item": [
														{
															"name": "GET User User Group with userGroupId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/userGroups/{{userGroupId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"userGroups",
																		"{{userGroupId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE User User Group with userGroupId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/userGroups/{{userGroupId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"userGroups",
																		"{{userGroupId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User User Groups with userId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/userGroups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"userGroups"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Group to User with userId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\":\"string\",\r\n    \"name\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/userGroups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"userGroups"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET User with userId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update User with userId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE User with userId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Users",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New User",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": \"string\",\r\n  \"surname\": \"string\",\r\n  \"login\": \"string\",\r\n  \"externalId\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"chat\": \"string\",\r\n  \"chatName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"uiLanguage\": \"string\",\r\n  \"promptLanguage\": \"string\",\r\n  \"timeZone\": \"string\",\r\n  \"synchronised\": true,\r\n  \"crmId\": \"string\",\r\n  \"businessObjectsId\": \"string\",\r\n  \"presenceId\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Groups",
							"item": [
								{
									"name": "{userGroupId}",
									"item": [
										{
											"name": "Users",
											"item": [
												{
													"name": "{userId}",
													"item": [
														{
															"name": "GET User Group User with userId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}/users/{{userId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"userGroups",
																		"{{userGroupId}}",
																		"users",
																		"{{userId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE User Group User with userId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}/users/{{userId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"userGroups",
																		"{{userGroupId}}",
																		"users",
																		"{{userId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User Group Users with userGroupId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}/users",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"userGroups",
																"{{userGroupId}}",
																"users"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User to User Group with userGroupId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\":\"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}/users",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"userGroups",
																"{{userGroupId}}",
																"users"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET User Group with userGroupId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userGroups",
														"{{userGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update User Group with userGroupId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userGroups",
														"{{userGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE User Group with userGroupId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userGroups",
														"{{userGroupId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET User Groups",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New User Group",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"string\",\r\n  \"synchronised\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userGroups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Settings Template",
							"item": [
								{
									"name": "{userSettingsTemplateId}",
									"item": [
										{
											"name": "Settings",
											"item": [
												{
													"name": "GET User Settings Template Settings with Id",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}/settings",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"userSettingsTemplates",
																"{{userSettingsTemplateId}}",
																"settings"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Settings Template Setting with Id",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"string\",\r\n  \"value\": \"string\",\r\n  \"forced\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}/settings",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"userSettingsTemplates",
																"{{userSettingsTemplateId}}",
																"settings"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET User Settings Template with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userSettingsTemplates",
														"{{userSettingsTemplateId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update User Settings Template with Id",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userSettingsTemplates",
														"{{userSettingsTemplateId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE User Settings Template with Id",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userSettingsTemplates",
														"{{userSettingsTemplateId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET User Settings Templates",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userSettingsTemplates"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New User Settings Template",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userSettingsTemplates"
											]
										},
										"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html#usersettingstemplates_post](https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html#usersettingstemplates_post)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scripts",
							"item": [
								{
									"name": "{scriptId}",
									"item": [
										{
											"name": "GET Script with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/scripts/{{scriptId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"scripts",
														"{{scriptId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Scripts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/scripts",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"scripts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Template Company",
							"item": [
								{
									"name": "POST Template Company",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"id\": \"string\",\r\n\"name\": \"string\",\r\n\"template\": \"TEMPLATE\",\r\n\"masterId\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/templateCompany",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"templateCompany"
											]
										},
										"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html#templatecompany_post](https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html#templatecompany_post)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Jobs",
							"item": [
								{
									"name": "{jobId}",
									"item": [
										{
											"name": "GET Job with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/jobs/{{jobId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"jobs",
														"{{jobId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Job with Id",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/jobs/{{jobId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"jobs",
														"{{jobId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Jobs",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/jobs",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"jobs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Import",
							"item": [
								{
									"name": "Calendar",
									"item": [
										{
											"name": "POST New Calendar",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/calendar",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"calendar"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates calendars.\n\nFields:\n\n- Id - Can be used to update existing calendar.\n    \n- Name - Required. If Id is not used, then Name will identify the calendar (creates new if does not exist).\n    \n- Priority - Integer. Must be unique. The schedule with highest priority calendar, which matches the current date, is used for queue/user settings template/contact center.\n    \n- Weekdays - Calendar can have zero or one Weekdays columns. Format: MON,TUE,WED,THU,FRI,SAT,SUN.\n    \n- Day - Calendar can have multiple Day columns (or none). Format: \"MMDD:Description\". \":Description\" is optional.\n    \n- Range - Calendar can have multiple Range columns (or none). Format: \"YYYYMMDD-YYYYMMDD:Description\". \":Description\" is optional.\n    \n- Delete - Should be empty. Value 'D' will delete the calendar.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Priority;Weekdays;Day;Day;Day;Day;Day;Range;Range\nWorkdays;100;MON,TUE,WED,THU,FRI\nLeisure;123;SAT,SUN;0501:First of May;1224:Christmas Eve;;;;20160325-20160328:Easter holiday;20160624-20160626\nPublic Holidays in Finland;990;;1206;0101;1224;1226;1225\n\n ```"
								},
								{
									"name": "Campaign",
									"item": [
										{
											"name": "POST New Campaign",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/campaign",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"campaign"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates customers to an outbound campaign.\n\nFields for outbound customer:\n\n- ExternalId - Required, must be unique within campaign.\n    \n- Phone1, Phone2, Phone3 - Each customer can have up to 3 phone numbers. Phone1 is required.\n    \n- Priority - Optional integer value. Smaller priority is handled first. Otherwise customers are handled in ExternalId order.\n    \n- TimeZone - TimeZone for the customer (like 'Europe/Helsinki'). By default the campaign or system TimeZone is used.\n    \n- AgentLogin - Which agent should handle this customer. By default any agent.\n    \n- Date - When this customer should be handled (in UTC). Formats: \"yyyy-MM-dd HH:mm:ss.SSS\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy-MM-dd HH:mm\", \"yyyy-MM-dd\". By default empty, so that customer can be called at any time.\n    \n- Result - Used in export only. New customer will get 'CALL' result by default. Customer will get result such as 'SUCCESS' or 'REFUSAL' eventually.\n    \n- CallResult - Used in export only. Customer will get call result such as 'SUCCESS', 'REFUSAL', 'BUSY' or 'NOANSWER' eventually.\n    \n- Classifier - Used in export only. Customer will get classifier based on CallResult eventually.\n    \n- Amount - Used in export only. Customer might get monetary value if outbound UI supports such thing.\n    \n- CallCount - Used in export only. CallCount tells approximately how many times customer has been called. BUSY and NOANSWER will increment CallCount, while REDIAL will not.\n    \n- AgentNumber - Used in export only. This column will get the agent phone number in export.\n    \n- Delete - Should be empty. Value 'D' will delete the customer from campaign.\n    \n- Any other field: Customer attribute, such as Name or Company.\n    \n\nAn example of import file in tab-delimited text/plain format (.txt):\n\n```\nExternalId    Phone1    Name\n1    +5550001    Name1\n2    005550002    Name2\n\n ```"
								},
								{
									"name": "Configuration",
									"item": [
										{
											"name": "POST New Configuration",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/configuration",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"configuration"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job for configuration, which can include any other import:\n\n- Directory\n    \n- UserGroup\n    \n- Roles\n    \n- UserGroupHierarchy\n    \n- Queues\n    \n- Calendar\n    \n- Skills\n    \n- Presence\n    \n- OutboundCampaign\n    \n- OutboundBlockedNumbers\n    \n- Scripts\n    \n- Rights\n    \n\nConfiguration supports only Excel files:\n\n- .xls - application/vnd.ms-excel\n    \n- .xlsx - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\n    \n\nWorksheet name must match one of the supported imports (listed above). Each worksheet will be imported in left to right order.\n\nThe following query parameters are not supported:\n\n- validateOnly (CHECK)\n    \n- continueOnError (CONTINUEONERROR)\n    \n- importLanguage (LANGUAGE)\n    \n\nInstead these parameters can be given at the beginning of each Excel worksheet. First rows are considered parameters, if the first column is empty. Then the second column contains the parameter name, and the third column can contain the parameter value, if parameter can have a value. For example:\n\n```\nColumn#1    Column#2        Column#3\n(empty)     LANGUAGE        EN\n(empty)     CHECK           (empty)\n(empty)     CONTINUEONERROR (empty)\n\n ```\n\nBoolean parameters like CHECK and CONTINUEONERROR get value '1' (true) if value is not given. '0' is false (default value, if parameter is not given at all).\n\nSome imports need to have parameters defined:\n\n- Directory - either ID (directoryGroupId) or NAME (directoryGroupName) must be given\n    \n- UserGroup - either ID (userGroupId) or NAME (userGroupName) can be given, or alternatively UserGroup can be given in each row\n    \n- Queues - either ID (queueGroupId) or NAME (queueGroupName) can be given, or alternatively QueueGroup can be given in each row\n    \n- OutboundCampaign - either ID (campaignId) or NAME (campaignName) must be given\n    \n\nFirst row that has non-empty column#1 must have the column names for the actual import data."
								},
								{
									"name": "Consent",
									"item": [
										{
											"name": "POST New Consent",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/consent",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"consent"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates consents.\n\nFields:\n\n- Number - Phone number.\n    \n- Usage - 'recording' (default) or 'whatsapp'. Number and Usage together identify the consent.\n    \n- Consent - 1=true, 0=false (default).\n    \n- CreationTime - Optional datetime in format \"yyyy-MM-dd HH:mm:ss\\[.SSS\\]\".\n    \n- Delete - Should be empty. Value 'D' will delete the consent.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nNumber;Consent;CreationTime;Usage\n+555001;1;2022-01-10 14:26:51;recording\n555002;0\n\n ```"
								},
								{
									"name": "Directory",
									"item": [
										{
											"name": "POST New Directory",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/directory",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"directory"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates directory entries to a directory group.\n\nFields for directory entry:\n\n- Id - Can be used to update existing directory entry.\n    \n- ExternalId - Required by default, can be used to update existing directory entry using ID from external system. The query parameter requireIdOrExternalId is true by default, but if set to false, then it is possible to import entry without Id and ExternalId, but then it will always create a new entry (so it will create duplicates, if same file is imported twice).\n    \n- Delete - Should be empty. Value 'D' will remove the directory entry.\n    \n- Any other field: Directory attribute, such as 'Company Name'. If field is multi-lingual, then field can contain language code, like 'Company Name:EN'. Language code must be one of the standard two-letter language codes that can be seen in SC.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nExternalId;Company Name;Full Name;Last Name;First Name\n1;Company1;Full Name 1;Last Name 1;First Name 1\n2;Company2;Full Name 2;Last Name 2;First Name 1\n\n ```"
								},
								{
									"name": "Disruption Items",
									"item": [
										{
											"name": "POST New Disruption Items",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/disruptionItems",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"disruptionItems"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates disruption items to a disruption set.\n\nFields:\n\n- DisruptionSetExternalId - Required, disruption set external ID.\n    \n- DisruptionSetName - Optional, needed when inserting a new set.\n    \n- Id - Internal ID, can be used to update existing disruption item.\n    \n- ExternalId - Required, can be used to update existing disruption item.\n    \n- Type - Disruption item type, required, one of: WHERE,WHY,WHEN.\n    \n- Name - Disruption item name.\n    \n- Description - Disruption item description.\n    \n- PromptId - Optional, prompt internal ID.\n    \n- PromptExternalId - Optional, prompt external ID. Optionally use either PromptId or PromptExternalId.\n    \n- SayAsValue - Optional digits. Use IVRTalk instead of pre-recorded prompt.\n    \n- number: 100 => \"hundred\"digits: 100 => \"one zero zero\"ordinal: 100 => \"hundredth\"date: ddMM or ddMMyyyy, for example 0102 means \"the first of February\" or \"February first\"time: HHmm, for example 1530 means \"fifteen thirty\"datetime: ddMMHHmm or ddMMyyyyHHmm\n    \n- SayAsGender - Optional integer, one of: 0 (MASCULINE), 1 (FEMININE), 2 (NEUTER).\n    \n- SayAsDeclension - Optional integer, one of: 0 (NOMINATIVE), 1 (GENITIVE).\n    \n- Delete - Should be empty. Value 'D' will remove the disruption item.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nId;DisruptionSetExternalId;DisruptionSetName;Type;ExternalId;Name;Description;PromptExternalId;SayAsValue;SayAsDatatype\n;002;set2;WHERE;l011;Location 1;desc 1;;00230;digits\n;002;set2;WHY;c001;Cause 1;desc 2;prompt_007;;\n;002;set2;WHEN;tm1500;15:00;desc 3 äöäöäö;;1500;time\n\n ```"
								},
								{
									"name": "OB Blocked Numbers",
									"item": [
										{
											"name": "POST New OB Blocked Numbers",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/outboundBlockedNumbers",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"outboundBlockedNumbers"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or removes outbound campaign blocked phone numbers. These numbers won't be called by outbound campaign dialer. If outbound customer does not have any other phone number, then customer result will be NO_BNUMBERS_LEFT.\n\nFields:\n\n- Number - Number to be added. Any other characters than the plus sign (+) and digits from 0 to 9 are removed from the number.\n    \n- Delete - Should be empty. Value 'D' will remove the number.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nNumber;Delete\n+555001\n555002;D\n\n ```"
								},
								{
									"name": "Presence Profiles",
									"item": [
										{
											"name": "POST New Presence Profiles",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/presenceProfiles",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"presenceProfiles"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates presence profiles.\n\nFields:\n\n- Id - Can be used to update existing presence profile.\n    \n- Name - Required, identifies the presence profile if Id is not used.\n    \n- Reason - Required, one of: BUSINESSTRIP, BUSY, CHILDCARE, DUTY, LUNCH, MEETING, NONE, OFFDUTY, OFFICIAL, OTHER, PARENTAL, TEMPOUT, TRAINING, VACATION, VISIT, SICK, DAYOFF.\n    \n- BehaviorDefault - Required, one of: BUSY, FREEFORWARD, MOBILE, IVR, PASS, SWITCHBOARD, VOICEMAIL, USERFORWARD.\n    \n- Type - Required, one of: PRESENCE, ABSENCE, CONFERENCE.\n    \n- Duration - Required, one of: NONE, REST_DAY, 5_MINUTE, 10_MINUTE, 15_MINUTE, 30_MINUTE, 45_MINUTE, 1_HOUR, 2_HOUR, 3_HOUR, 4_HOUR, 5_HOUR, 6_HOUR, 7_HOUR, 8_HOUR, 9_HOUR, 10_HOUR, 11_HOUR, 12_HOUR, 1_DAY, 2_DAY, 3_DAY, 4_DAY, 5_DAY, 6_DAY, 1_WEEK, 2_WEEK, 3_WEEK, 4_WEEK.\n    \n- Priority - Required, integer >= 0.\n    \n- Availability - One of: AWAY, TENTATIVE, FREE.\n    \n- QueueGroup - Queue group name (agent is logged into these queues automatically).\n    \n- DurationRounding - Required, integer between 0 - 60 (minutes).\n    \n- BehaviorBusy - See BehaviorDefault for possible values. Can't be used with Type=CONFERENCE.\n    \n- BehaviorNotAnswered - See BehaviorDefault for possible values. Can't be used with Type=CONFERENCE.\n    \n- BehaviorLoggedOut - See BehaviorDefault for possible values. Can't be used with Type=CONFERENCE.\n    \n- FreeForwardNumber - Can't be used with Type=CONFERENCE.\n    \n- IvrGreetingType - Can't be used with Type=CONFERENCE.\n    \n- IvrOption1 - Can't be used with Type=CONFERENCE. Format: key;option. Because key and option are separated by ; character, then if text/csv format is used, then this column value must be quoted like \"2;VOICEMAIL\". Key is one of: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \\*, #. Option is one of: VOICEMAIL, MOBILE, SWITCHBOARD, USERFORWARD.\n    \n- IvrOption2 - See IvrOption1.\n    \n- IvrOption3 - See IvrOption1.\n    \n- IvrOption4 - See IvrOption1.\n    \n- Delete - Should be empty. Value 'D' will remove the presence profile.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Reason;BehaviorDefault;Type;Duration;Priority;Availability;QueueGroup;DurationRounding;BehaviorBusy;BehaviorNotAnswered;BehaviorLoggedOut;FreeForwardNumber;IvrGreetingType;IvrOption1;IvrOption2;IvrOption3;IvrOption4\nTEST_Default;NONE;PASS;PRESENCE;NONE;100;;;0;PASS;BUSY;BUSY;;;;;;\nTEST_Lunch;LUNCH;BUSY;ABSENCE;1_HOUR;100;;NOQUEUE;0;BUSY;BUSY;BUSY;;LUNCH;\"1;USERFORWARD\";\"2;VOICEMAIL\";;\nTEST_Sick leave;VACATION;IVR;ABSENCE;1_DAY;100;;;0;IVR;IVR;IVR;;;;;;\nTEST_Vacation;VACATION;IVR;ABSENCE;1_WEEK;100;;NOQUEUE;0;IVR;IVR;IVR;;;;;;\nTEST_Conference Call;NONE;;CONFERENCE;REST_DAY;100;;;5;;;;;;;;;\nTEST_Meeting;MEETING;VOICEMAIL;ABSENCE;1_HOUR;2;;;5;VOICEMAIL;VOICEMAIL;VOICEMAIL;;;;;;\nTEST_Businesstrip;BUSINESSTRIP;IVR;ABSENCE;REST_DAY;100;;;5;IVR;BUSY;IVR;;BUSINESSTRIP;\"1;VOICEMAIL\";\"2;MOBILE\";\"3;SWITCHBOARD\";\"4;USERFORWARD\"\nTEST_Away;TEMPOUT;IVR;PRESENCE;15_MINUTE;100;;;0;IVR;BUSY;IVR;;TEMPOUT;;;;\nTEST_Lunch;LUNCH;BUSY;ABSENCE;1_HOUR;100;;NOQUEUE;0;BUSY;BUSY;BUSY;;LUNCH;\"1;USERFORWARD\";\"2;VOICEMAIL\";;\nTEST_Conffis;NONE;IVR;CONFERENCE;1_HOUR;100;;;5\n\n ```"
								},
								{
									"name": "Queues",
									"item": [
										{
											"name": "POST New Queues",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/queues",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"queues"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates queues to a queue group.\n\nFields grouped same way as in SC. If setting is only used with certain queue type, then there is (phone), (email) or (chat).\n\nBasics:\n\n- Type - One of: Phone, Email, Chat. Type can't be changed for existing queue.\n    \n- Name - Identifies the queue if Id is not used. Creates new if does not exist already.\n    \n- Description - Queue description.\n    \n- Ordinal - Integer.\n    \n- Language - Prompt language, one of supported two letter language codes or a custom language configured in SC.\n    \n- TimeZone - One of supported time zones like 'Europe/Helsinki'.\n    \n- CriticalTime - Integer seconds, email critical time (email).\n    \n- LoginType - One of: AutoAllocation (default), HuntGroup.\n    \n- WarningTime - Integer seconds, email warning time (email).\n    \n- Id - Can be used to update existing queue.\n    \n- RingbackTime - Integer seconds, phone ringing time (phone).\n    \n- (Script not supported)\n    \n- (Opening Type not supported)\n    \n- Synchronised - Is this queue synchronized to directory, one of: 1 (true), 0 (false).\n    \n\nNumbers/Addresses:\n\n- Address - Queue can have multiple addresses (there can be multiple Address columns). Phone queue address can contain only digits. Email queue address must be a valid email address. Chat queue address must contain @ character. Address is used as identifier, so it can't be modified. Changing address will add another address to queue, unless REPLACEADDRESSES=1 parameter is given, in which case the old address is removed (default).\n    \n\nContact Management:\n\n- Priority - Integer.\n    \n- QueueLength - Integer, queue size.\n    \n- MaxPickTimeout - Integer milliseconds, timeout for contacts to be picked or rejected, default value 120000 (2 minutes).\n    \n- EarlyQueuing - 1 (on, default) or 0 (off) (phone).\n    \n- ClearOldSkills - 1 or 0. Recording (phone):\n    \n- ServerRecording - Record queue calls (phone): 0 (off), 1 (on)\n    \n- RecordingConsentOption - Recording behavior with consents (phone): 0 (ignore consents), 1 (ask for and follow customer consent, default)\n    \n- RecordingConsentNumber - Consent IVR number (phone).\n    \n\nForwarding:\n\n- DefaultQueue - Address of other queue.\n    \n- MaxWaitTimeInQueue - Integer seconds.\n    \n- QueueFullIfNoDest - One of: MaxWaitingTime, NoServingAgents, NoFreeAgents.\n    \n- ForwardOnServiceClosed - Address of other queue (phone).\n    \n- LetScheduleClosed - 1 or 0, Routing to Closed Overflow Queue (phone).\n    \n- LeaveVoiceMessageChar - DTMF character for forwarding (phone).\n    \n- ForwardOnUserInput - Forwarding number after DTMF character (phone).\n    \n- ForwardOnServiceClosing - Forwarding destination for scheduled queue close, address of other queue.\n    \n- QCBQueueNumber - Callback queue number (phone).\n    \n- ForwardEnabled - Enable instant forwarding (phone), one of: 1 (true), 0 (false).\n    \n- ForwardNumber - Instant forwarding number (phone).\n    \n\nContact Management continues:\n\n- IfNoAnsAddToRejNbrs - Block rejected contact from agent (phone) (chat), one of: 1 (yes, default), -2 (never), 0 (no blocking if contact redirected after max waiting time).\n    \n- IfNoAnsAddToRejNbrs - Block rejected contact from agent (email), one of: 0 (no, default), 1 (yes).\n    \n- BusyWhenWrapUp - Busy during wrap-up (chat): 0 (off, default), 1 (on).\n    \n- QueueLenSlope - Number of agents affect queue size, default 0.0 (phone).\n    \n- MaxPrefOperWait - Integer milliseconds, max. waiting time for preferred agent, default 40000 (phone).\n    \n- QueUseEntryTime - Reference timestamp for calculating queuing time (phone), one of: ORIG_CC (call enters contact center first time, default), ORIG (CEM receives call information), CURR_APP (call's last entry to contact center), CURR (call enters queue)\n    \n- QueLWTDDependencies - Queues used for long-term waiting time (phone).\n    \n- ExtAgentShowCaller - Original source number shown to external agents and MTD devices (phone), one of: 0 (off, default), 1 (on).\n    \n\nTransfer (phone):\n\n- HoldTransferWhenBusy - Enable transfer-on-hold when busy (phone), one of: 0 (no transfer-on-hold if target is busy) 1 (transfer-on-hold if target is mobile) 2 (always enable transfer-on-hold, default)\n    \n- HoldTransferTimeout - Integer milliseconds, default 3600000 (1 hour), timeout for transfer-on-hold (phone).\n    \n- UseJoinTransfer - Enable join transfer, 0 (no, default), 1 (use when transferring to external number) (phone).\n    \n- JoinTransferTimeout - Integer milliseconds, default 30000 (phone).\n    \n- UseInternalTransferBarring - Enable barring of internal transfers (phone), one of: 0 (off, default), 1 (on).\n    \n\nOpt-in IVR settings (phone):\n\n- OptInActive - Activate opt-in IVR (phone): 0 (off), 1 (on).\n    \n- OptInNumber - Opt-in IVR number (phone).\n    \n\nContact Management continues:\n\n- OverrideEmails - Allow other contacts while email open (email), one of: 0 (no, default), 1 (yes).\n    \n- ExtraDataWhenAllocated - Extra data included when e-mail allocated (email).\n    \n\nWeight Value Settings:\n\n- QuePriorityWeightLocalCall - Float, importance of contact when on same CEM as agent, default 1.00, one of: 1.00, 1.05, 1.10, 1.15, 1.20, 1.25, 1.30.\n    \n- QuePriorityWeightLocalOper - Float, importance of agent when on same CEM as contact, default 1.00, one of: 1.00, 1.05, 1.10, 1.15, 1.20, 1.25, 1.30.\n    \n\nE-Mail Settings (email):\n\n- DefaultEmailReplyAddress - Default sender address (email).\n    \n- Ch_AcceptTimeLimit - Integer seconds, default 62, (email).\n    \n- UseRequiredAgent - Use required agent instead of preferred agent (email): 0 (off), 1 (on).\n    \n- RequiredAgentExpiryTime - Integer seconds, default 60, default expiry time for required agent (email).\n    \n- Ch_PrefAgent - Preferred agent, one of: 0 (off), 1 (on, default) (email).\n    \n- AllowPickingReqRefEmails - Allow picking by other Communication Panel agents (email): 0 (off), 1 (on).\n    \n- Ch_DoCreateTask - Block e-mail from addresses (email).\n    \n- DisableMailChannel - Close e-mail queue (email), one of: 0 (no, default), 1 (yes).\n    \n- Ch_CustInfo - Customer information, (email).\n    \n- Ch_Language - Language definition method, (email).\n    \n- Ch_Priority - Priority definition method (email).\n    \n- DeleteOldMailsAfterDays - Integer days, old e-mails deleted after (email), default -1 (disabled).\n    \n- MaxMailSizeKb - Integer kilobytes, max. size of incoming email (email)\n    \n\nReporting and monitoring:\n\n- FalseAttemptTime - Integer seconds, false-attempt limit, default 5.\n    \n- AnsweredOnTime - Integer seconds, answered-on-time limit, default 20.\n    \n- AnsweredOnTimeCBR - Integer seconds, answered-on-time limit for callback requests (phone).\n    \n- FalseAttemptTimeCBR - Integer seconds, false-attempt limit for callback requests (phone).\n    \n- MaxTalkTime - Integer seconds, max. handling time, default 36000 (10 hours).\n    \n- MaxWaitTime - Integer seconds, max. waiting time, default 18000 (5 hours).\n    \n\nPrompts (phone) (chat):\n\n- QuePositionPromptWeight - Queue position multiplier (phone) (chat).\n    \n- EstWaitTimePromptWeight - Waiting time multiplier (phone) (chat).\n    \n- MaxCountQueueFullMessages - No. of times QueueFull is played (phone).\n    \n- MaxCountServiceClosedMessages - No. of times ServiceClosed is played (phone).\n    \n- EstWaitTimePromptLimits - Limit values for waiting time (phone) (chat). Format: \"min,max\", where both min and max are integers (min < max, min >= 0).\n    \n- QuePositionPromptLimits - Limit values for queue position (phone) (chat). Format: \"min,max\", where both min and max are integers (min < max, min >= 0).\n    \n- ServingAgentsPromptLimits - Limit values for agents serving in queue (phone) (chat). Format: \"min,max\", where both min and max are integers (min < max, min >= 0).\n    \n\nQueue Groups:\n\n- QueueGroup - Queue can be added to another groups as well. There can be multiple QueueGroup columns. If parameter REPLACE_GROUPS=1, then queue is removed from other groups not included in this import.\n    \n\nSkills:\n\n- Skill - Queue can have multiple skill requirements (columns). Each requirement is in format: skill=value. Value is integer, 0 means that requirement is deleted.\n    \n\nSkill Reduction:\n\n- DisableSkillAdjustment - Use absolut waiting time: 0 (off), 1 (on, default).\n    \n\nVoicemail and Notification Call Settings (phone):\n\n- Voicemail - Voice mail number (phone).\n    \n- VoiceMailInQueueFull - Transfer to voicemail if queue is full: 0 (off, default), 1 (on).\n    \n\nExternal Agent (phone):\n\n- ExtAgentMaxAnswerWaitTime - Integer milliseconds, default 30000, max. answer waiting time (phone).\n    \n- ExtAgentPlayAcceptQuestion - Require confirmation (phone), one of: 1 (on default), 0 (off).\n    \n- ExtAgentMaxDTMFWaitTime - Integer milliseconds, default 15000, max. waiting time for confirmation (phone).\n    \n- ExtAgentAcceptChar - Accepting character, default # (phone).\n    \n- ExtAgentRejectChar - Rejecting character, default 3 (phone).\n    \n\nCDT Settings:\n\n- AfterworkUsage - Activate wrap-up status automatically: 0 (off), 1 (on).\n    \n- AutoPaperwork - Activate not-ready status after rejecting contact: 0 (off), 1 (on).\n    \n- AutoPWTime - Integer seconds, wrap-up time.\n    \n- UseRestingAfterScripting - Use rest time after scripting: 0 (off), 1 (on).\n    \n- (AnswerTemplate not supported (Default reply template) (email) (chat))\n    \n- TalkTimeLimit - Integer seconds, handling time limit.\n    \n- SearchGroup - Target directory for searches.\n    \n- AnswerInfo - Queue contact information.\n    \n\nIntegration Settings:\n\n- OII - Enable OII integration: 0 (off), 1 (on, default).\n    \n- CrmCodUrl - SAP Service Cloud (C4C) integration URL.\n    \n- CrmLink - Launch application or URL (phone).\n    \n\nThreshold Values for Queue Statistics:\n\n- MaxWaitTimeCriticalLevel - Integer seconds, critical level of queuing time.\n    \n- MaxWaitTimeWarningLevel - Integer seconds, warning level of queuing time.\n    \n- InteractionsCriticalLevel - Integer, critical level of queuing conversations.\n    \n- InteractionsWarningLevel - Integer, warning level of queuing conversations.\n    \n- ServiceLevelCriticalLevel - Integer, critical level of service level.\n    \n- ServiceLevelWarningLevel - Integer, warning level of service level.\n    \n- ServingAgentCriticalLevel - Integer, critical level of serving agents.\n    \n- ServingAgentWarningLevel - Integer, warning level of serving agents.\n    \n- FreeAgentCriticalLevel - Integer, critical level of free agents.\n    \n- FreeAgentWarningLevel - Integer, warning level of free agents.\n    \n\nPersonal Data Retention Time\n\n- PersonalDataRetention - Integer days, must be less than channel level setting (which must be configured).\n    \n\nOther fields:\n\n- Any other queue parameter, listed separately below.\n    \n- Any other field: Valid directory field (if Synchronized=1). Name is synchronized to \"Queue Name\" automatically by BJS.\n    \n- Delete - Should be empty. Value 'D' will remove the queue.\n    \n\nAdditional queue parameters:\n\n- MaxTotalUnhandledTasks - Integer, max. handled of unhandled e-mails (email). Only available as email channel parameter in SC.\n    \n- ChatIdleTimeout - Integer seconds, default 600, timeout for idle chats. Only available as chat channel parameter in SC.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nType;Name;Address\nPhone;Test phone queue;50000\n\n ```"
								},
								{
									"name": "Rights",
									"item": [
										{
											"name": "POST New Rights",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/rights",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"rights"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds, updates or deletes rights. Right is deleted if there are no enabled access types.\n\nFields:\n\n- SubjectType - Required, one of: User, Role, UserGroup\n    \n- SubjectName - Required, name of the subject (User/Role/UserGroup)\n    \n- ObjectType - Required, one of system API object names, like: User, Queue, QueueGroup, UserService, UserSettingsProfile.\n    \n- ObjectName - Required, name of the object, or \"(ALL)\" if class level right, or \"(SELF)\" if self right.\n    \n- Predicate - Usually empty, but can contain ObjectType, for example if ObjectType=User, then Predicate can be LoginAuthenticationInfo. Multiple predicates are separated by comma.\n    \n- Type - Required, one of: ACCESS, GRANT\n    \n- Id - Can be used to identify existing right. Otherwise the right is identified by: subject, object, Type, Predicate.\n    \n- SubjectId - With SubjectType, can be used to identify subject. Otherwise the subject is identified by SubjectName.\n    \n- ObjectId - With ObjectType, can be used to identify the object. Otherwise the object is identified by ObjectName.\n    \n\nAccess types are enabled by having value X. If value is empty, then that access type is disabled.\n\n- View - View object.\n    \n- Modify - Modify object.\n    \n- Create - Create object.\n    \n- Delete - Delete object.\n    \n- Use - Use object.\n    \n- ManageRights - Manage rights\n    \n- ManageMembers - Manage members.\n    \n- Serve - Serve in queue.\n    \n- ControlContact - Control contact (supervisor).\n    \n- BargeIn - Barge-in (supervisor).\n    \n- Listen - Listen (supervisor).\n    \n- Coach - Coach (supervisor).\n    \n- LogOnToQueues - Log on agents to queues (supervisor).\n    \n- StatisticsSummary - Statistics summary.\n    \n- StatisticsDetails - Statistics details.\n    \n- ListenToRecording - Listen to recording.\n    \n- ManageContactHistory - Manage contact history.\n    \n- ManageVoicemails - Manage voicemails.\n    \n- ManagePresence - Manage presence.\n    \n- Messaging - Messaging.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nSubjectType;SubjectName;ObjectType;ObjectName;Predicate;Type;View;Modify;Create;Delete\nRole;Advanced Monitoring User;Skill;(ALL);;ACCESS;X;;;\n\n ```\n\nThis example adds only View right for \"Advanced Monitoring User\" role to all skills (other possible access types for this right are removed, even those not listed in header)."
								},
								{
									"name": "Roles",
									"item": [
										{
											"name": "POST New Roles",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/roles",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"roles"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates roles.\n\nFields:\n\n- Name - Required.\n    \n- Description\n    \n- Delete - Should be empty. Value 'D' will remove the role.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Description\nRole name;Role description\n\n ```"
								},
								{
									"name": "Scripts",
									"item": [
										{
											"name": "POST New Scripts",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/scripts",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"scripts"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates scripts. Each row is one of the following:\n\n- Script - If row has Name, it identifies the script.\n    \n- Question - If row has Ordinal, it identifies the question for the previous script.\n    \n- Answer - If row has AnswerOrdinal, it identifies the answer for the previous question.\n    \n\nFields for script:\n\n- Name - Required for script row, identifies the script.\n    \n- Type - Required for script row, one of: STATIC, INTERACTIVE, CALLBACK.\n    \n- Remarks - Script remarks.\n    \n- LockFirstQuestion - Show first question always on top: 0 (off), 1 (on).\n    \n\nFields for question:\n\n- Ordinal - Required for question row, identifies the question within the previous script.\n    \n- Question - Required for question row. Text for the actual question.\n    \n- NextOrdinal - Next question ordinal. Can be used only in INTERACTIVE scripts.\n    \n- ControlType - Required for question row, one of: INFO, RADIOBUTTON, CHECKBOX, DROPDOWNLIST, COMBOBOX, INPUTTEXT, TEXTAREA, DROPDOWNCHECKBOX\n    \n- DataType - Can only be used for COMBOBOX, INPUTTEXT or TEXTAREA control types, one of: TEXT, INTEGER, FLOATING, DATETIME, CURRENCY\n    \n- Prefill - Integer, max. number of answers.\n    \n- Mandatory - Is it mandatory to answer this question: 0 (no), 1 (yes).\n    \n- IsAmount - Is the answer used in amount calculations: 0 (no), 1 (yes).\n    \n- Width - View setting for question width in pixels.\n    \n- Height - View setting for question height in pixels.\n    \n\nFields for answer:\n\n- AnswerOrdinal - Required for answer row, identifies the answer within the previous question. The following question types can have answers: RADIOBUTTON, CHECKBOX, DROPDOWNLIST, COMBOBOX, DROPDOWNCHECKBOX\n    \n- Answer - Answer text.\n    \n- Amount - Float, can only be used if question IsAmount=1.\n    \n- Recording - Start recording: 0 (no), 1 (yes).\n    \n- NextQuestion - Next question ordinal in INTERACTIVE scripts.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Type;Remarks;LockFirstQuestion;Ordinal;Question;NextOrdinal;ControlType;DataType;Prefill;Mandatory;IsAmount;Width;Height;AnswerOrdinal;Answer;Amount;Recording;NextQuestion\nScript name;STATIC;;0;;;;;;;;;;;;;;;\n;;;;10;Question text;;CHECKBOX;;;0;0;;;;;;;\n;;;;;;;;;;;;;;1;Yes;;0;\n;;;;;;;;;;;;;;2;No;;0    \n\n ```"
								},
								{
									"name": "Skills",
									"item": [
										{
											"name": "POST New Skills",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/skills",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"skills"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates skills.\n\nFields:\n\n- Id - Can be used to update existing skill.\n    \n- Name - Required. If Id is not used, then ExternalName or Name will identify the skill.\n    \n- Description\n    \n- ExternalName - Can be used to identify the skill if Id is not used.\n    \n- Delete - Should be empty. Value 'D' will delete the skill.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Description;ExternalName\nSkill name;Skill description;\n\n ```"
								},
								{
									"name": "User Group Hierarchy",
									"item": [
										{
											"name": "POST New User Group Hierarchy",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/userGroupHierarchy",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"userGroupHierarchy"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that updates user group hierarchy.\n\nFields:\n\n- Name - Required, user group name.\n    \n- Description - User group description.\n    \n- Parent - Parent user group name. Can have multiple columns to have multiple parents.\n    \n- Role - Role names. Can have multiple columns to have multiple roles.\n    \n- Delete - Should be empty. Value 'D' will delete the user group.\n    \n\nOptional parameters (only possible to give in Configuration import):\n\n- REPLACE_ROLES - If 1, then other roles not included in this import will be removed from user group (by default 0). If there are no Role values included in this import, then no roles are removed.\n    \n- REPLACE_PARENTS - If 1, then other parents not included in this import will be removed from user group (by default 0). If there are no Parent values included in this import, then no parents are removed.\n    \n- CREATE_MISSING_GROUPS - If 1 (default), then user groups and roles not existing already in the system will be created.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Description;Parent;Parent;Role;Role\nParent1name;Parent1description\nParent2name;Parent2description\nChild1Name;Child1description;Parent1Name;Parent2Name;Role1;Role2\nChild2Name;Child2description;Parent2Name;;Role2\nChild3Name;Child3description;Child1Name\n\n ```"
								},
								{
									"name": "Users",
									"item": [
										{
											"name": "POST New Users",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/users",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates users.\n\nFields:\n\n- Id - Can be used to update existing user.\n    \n- ExternalId - Can be used to identify the user.\n    \n- Login - Login name for the user. Identifies the user if Id and ExternalId fields are empty.\n    \n- CRM - SAP CRM name for the user (uppercase).\n    \n- PresenceId - Presence ID for the user.\n    \n- UILanguage - User interface language, one of standard two letter system languages that can be seen in SC.\n    \n- PromptLanguage - Prompt language, can contain also custom languages defined in SC.\n    \n- FirstName - First name.\n    \n- Surname - Last name.\n    \n- TimeZone - Time zone like 'Europe/Helsinki'.\n    \n- Phone - Internal phone number, digits only.\n    \n- MobilePhone - External mobile phone number.\n    \n- Voicemail - Voicemail number.\n    \n- EMail - Email address.\n    \n- Chat - Chat address, must contain @ character.\n    \n- ChatName - Chat name shown to customers.\n    \n- Settings - User settings template.\n    \n- Role - Role for the user. There can be multiple Role columns.\n    \n- Skill - Skill and value for the user. Format: skill=value. If value is empty or 0, then skill is deleted from this user. There can be multiple Skill columns.\n    \n- Subject - Certificate subject. Certificates are identified by both subject and issuer. There can be multiple Subject columns.\n    \n- Issuer - Certificate issuer. There should be same amount of Issuer columns as Subject columns.\n    \n- Synchronised - 1 if this user should be synchronized to directory.\n    \n- ReportingGroup - Reporting group.\n    \n- UserGroup - User group. There can be multiple UserGroup columns.\n    \n- ForwardNumber - Personal forwarding number.\n    \n- DefaultQueue - Number of switchboard queue.\n    \n- Priority - Float.\n    \n- ExternalAgentNumber - External agent number.\n    \n- MaxCallsWaiting - Maximum number of waiting calls.\n    \n- Delete - Should be empty. Value 'D' will delete the user.\n    \n\nOptional parameters (possible to give in Configuration import):\n\n- REPLACEROLES - If 1, then other roles not included in this import will be removed from user (by default 0). If there are no Role values included in this import, then no roles are removed.\n    \n- REPLACE_USER_GROUPS - If 1, then other user groups not included in this import will be removed from user (by default 0). If there are no UserGroup values included in this import, then no user groups are removed.\n    \n- CREATE_MISSING_GROUPS - If 1 (default), then user groups and roles not existing already in the system will be created.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nLogin;Surname;FirstName;TimeZone\nTest1;Last name;First name;Europe/Helsinki\n\n ```"
								}
							],
							"description": "StartFragmentImport supports .txt, .csv, .xls and .xlsx files. POSTing new import returns the job ID, which can be monitored using GET /RI/rci/jobs/ID. Files must have column names in the first line. Columns in .txt files are separated by tab and in .csv files by semicolon (;). If value contains separator character (or starts with \" character), then it must be quoted using \" characters (and \" characters in value must be doubled).EndFragment"
						},
						{
							"name": "Emergency Locations",
							"item": [
								{
									"name": "{emergencyLocationId}",
									"item": [
										{
											"name": "GET Emergency Location with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/emergencyLocations/{{emergencyLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"emergencyLocations",
														"{{emergencyLocationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Emergency Location with Id",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/emergencyLocations/{{emergencyLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"emergencyLocations",
														"{{emergencyLocationId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Emergency Locations",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/emergencyLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"emergencyLocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Emergency Location",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"string\",\r\n  \"type\": \"string\",\r\n  \"address\": {\r\n    \"streetNum\": \"string\",\r\n    \"streetName\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"postalCode\": \"string\",\r\n    \"callbackNumber\": \"string\"\r\n  },\r\n  \"details\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/emergencyLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"emergencyLocations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Emergency Locations",
							"item": [
								{
									"name": "{userEmergencyLocationId}",
									"item": [
										{
											"name": "GET User Emergency Location with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userEmergencyLocations/{{userEmergencyLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userEmergencyLocations",
														"{{userEmergencyLocationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE User Emergency Location with Id",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userEmergencyLocations/{{userEmergencyLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userEmergencyLocations",
														"{{userEmergencyLocationId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET User Emergency Locations",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userEmergencyLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userEmergencyLocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New User Emergency Location",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"locationId\": \"string\",\r\n  \"userId\": \"string\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userEmergencyLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userEmergencyLocations"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html](https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html)"
				},
				{
					"name": "Contact Management Interface",
					"item": [
						{
							"name": "Callbacks",
							"item": [
								{
									"name": "{callbackId}",
									"item": [
										{
											"name": "GET Callback with callbackId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callbacks/{{callbackId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"callbacks",
														"{{callbackId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Callback with callbackId",
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"customerNumber\": \"string\",\r\n    \"lastResult\": \"string\",\r\n    \"notes\": \"string\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callbacks/{{callbackId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"callbacks",
														"{{callbackId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Callbacks",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callbacks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"callbacks"
											],
											"query": [
												{
													"key": "customerNumber",
													"value": "05265710",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Callback",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n    \"customerNumber\": \"string\",\r\n    \"callbackQueueNumber\": \"string\",\r\n    \"notes\": \"string\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callbacks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"callbacks"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Call Recordings",
							"item": [
								{
									"name": "{callRecordingId}",
									"item": [
										{
											"name": "Listen Log",
											"item": [
												{
													"name": "GET Listen Log with callRecordingId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callRecordings/{{callRecordingId}}/listenLog",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"callRecordings",
																"{{callRecordingId}}",
																"listenLog"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST Listen Log with callRecordingId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"description\": \"string\",\r\n    \"userSessionId\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callRecordings/{{callRecordingId}}/listenLog",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"callRecordings",
																"{{callRecordingId}}",
																"listenLog"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Call Recording with callRecordingId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callRecordings/{{callRecordingId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"callRecordings",
														"{{callRecordingId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Call Recordings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callRecordings",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"callRecordings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Chats",
							"item": [
								{
									"name": "{chatId}",
									"item": [
										{
											"name": "GET Chat with chatId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/chats/{{chatId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"chats",
														"{{chatId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Chats",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/chats",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"chats"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Chat",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"originator\": \"string\",\r\n  \"destination\": \"string\",\r\n  \"from_queue\": {\r\n    \"id\": \"string\",\r\n    \"name\": \"string\"\r\n  },\r\n  \"title\": \"string\",\r\n  \"channel_type\": \"string\",\r\n  \"channel_sub_type\": \"string\",\r\n  \"participants\": [\r\n    {\r\n      \"alias\": \"string\",\r\n      \"uniquekey\": \"string\"\r\n    }\r\n  ],\r\n  \"transcript\": {\r\n    \"messages\": [\r\n      {\r\n        \"message\": \"string\",\r\n        \"originator\": \"string\",\r\n        \"timeStamp\": \"string\",\r\n        \"type\": \"string\"\r\n      }\r\n    ]\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/chats",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"chats"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Contacts",
							"item": [
								{
									"name": "{contactId}",
									"item": [
										{
											"name": "Remarks",
											"item": [
												{
													"name": "GET Contact Remarks",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}/remarks",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"remarks"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Remark",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}/remarks",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"remarks"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Remark",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}/remarks",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"remarks"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Details",
											"item": [
												{
													"name": "GET Details with contactId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}/details",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"details"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Contact with contactId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"contacts",
														"{{contactId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Contacts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Emails",
							"item": [
								{
									"name": "{emailId}",
									"item": [
										{
											"name": "GET Email with emailId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/emails/{{emailId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"emails",
														"{{emailId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Emails",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/emails",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"emails"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Messages",
							"item": [
								{
									"name": "{messageId}",
									"item": [
										{
											"name": "GET Message with messageId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages/{{messageId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"messages",
														"{{messageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Message with messageId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages/{{messageId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"messages",
														"{{messageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Message with messageId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages/{{messageId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"messages",
														"{{messageId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Messages",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"messages"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Message",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"destinations\": {\r\n    \"destination\": [\r\n      {\r\n        \"address\": \"string\"\r\n      }\r\n    ]\r\n  },\r\n  \"message\": \"string\",\r\n  \"source\": \"string\",\r\n  \"subType\": \"string\",\r\n  \"contentType\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"messages"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Script Results",
							"item": [
								{
									"name": "{scriptResultId}",
									"item": [
										{
											"name": "GET Script result with scriptResultId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/scriptResults/{{scriptResultId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"scriptResults",
														"{{scriptResultId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Scrip Results",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/scriptResults",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"scriptResults"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Script Result",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"script_id\": \"string\",\r\n  \"contact_id\": \"string\",\r\n  \"scriptquestions\": [\r\n    {\r\n      \"id\": \"string\",\r\n      \"scriptanswers\": [\r\n        {\r\n          \"id\": \"string\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"id\": \"string\",\r\n      \"scriptanswers\": [\r\n        {\r\n          \"answerdata\": \"string\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/scriptResults",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"scriptResults"
											]
										},
										"description": "StartFragment\n\nAdds or updates script results for the given contact. Script, question and answer Ids must be fetched first using\n\n```\nGET /RI/rci/scripts (returns the list of scripts in system)\nGET /RI/rci/scripts/:id (returns the details of one script, including questions and answers)\n\n ```\n\nRequired fields:\n\n- contact_id - User needs to have MANAGE_CONTACTS right for the contact queue or contact agent.\n    \n- script_id - Script Id.\n    \n- question.id - Question Id. The given _question.data_ is ignored.\n    \n- answer.id - Required when question control type is one of: RADIOBUTTON, CHECKBOX, DROPDOWNLIST, DROPDOWNCHECKBOX, COMBOBOX. In these cases the given _answerdata_ is ignored.\n    \n- answer.answerdata - Required when _answer.id_ is not used, with free text control types: INPUTTEXT, TEXTAREA, COMBOBOX.\n    \n\nIf script has any mandatory questions, then there needs to be answer to such question."
									},
									"response": []
								}
							]
						},
						{
							"name": "Contact Data",
							"item": [
								{
									"name": "{contactId}",
									"item": [
										{
											"name": "GET Contact Data with contactId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contactData/{{contactId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"contactData",
														"{{contactId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Contact Data",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contactData",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"contactData"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Contact Data",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"string\",\r\n    \"attachedData\": \"{\\\"CustomData\\\": \\\"Test\\\", \\\"CustomData2\\\": \\\"Test2\\\"}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contactData",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"contactData"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Customer Consents",
							"item": [
								{
									"name": "{usage}_{address}",
									"item": [
										{
											"name": "GET Customer Consent with usage and address",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/customerConsents/{{usage}}_{{address}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"customerConsents",
														"{{usage}}_{{address}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Customer Consent with usage and address Copy",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/customerConsents/{{usage}}_{{address}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"customerConsents",
														"{{usage}}_{{address}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Customer Consents",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/customerConsents",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"customerConsents"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Customer Consent",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"string\",\r\n    \"usage\": \"string\",\r\n    \"consent\": true\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/customerConsents",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"customerConsents"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "S3 Attachments",
							"item": [
								{
									"name": "POST New Signed Link for uploading attachments",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"mimeType\": \"text/plain\",\r\n    \"fileName\": \"string\",\r\n    \"fileSize\": 5839\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/s3attachments",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"s3attachments"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/CMI.html](https://docs.cc.sinch.com/onpremise/fp19/api/CMI.html)"
				},
				{
					"name": "Directory and Presence Interface",
					"item": [
						{
							"name": "Entries",
							"item": [
								{
									"name": "{entryId}",
									"item": [
										{
											"name": "GET Entry with entryId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{dpi}}",
													"path": [
														"entries",
														"{{entryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Entry with entryId",
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"EBDE6180803B4F7798451E3742EE89A3\",\r\n    \"accessType\": 15,\r\n    \"attrs\": [\r\n        {\r\n            \"id\": \"02302610CE78413CB62D5EF7A067A6A4\",\r\n            \"language\": \"EN\",\r\n            \"value\": \"05265710\"\r\n        },\r\n        {\r\n            \"id\": \"CEF4CED0F14D462C85B4976068DC9974\",\r\n            \"language\": \"EN\",\r\n            \"value\": \"EST\"\r\n        },\r\n\t\t{\r\n\t\t\t\"id\": \"C3418D0465A8476CA0DD0FAF536AD6D8\",\r\n\t\t\t\"language\": \"EN\",\r\n\t\t\t\"value\": \"2023-08-20\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": \"DBA695A0442F479B831AB2B09546DB76\",\r\n\t\t\t\"language\": \"EN\",\r\n\t\t\t\"value\": \"2023-08-20\"\r\n\t\t}\r\n    ],\r\n    \"groups\": [\r\n        {\r\n            \"id\": \"9C42B2C705B94410B781F770B22386E0\",\r\n            \"name\": \"External Customer\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{dpi}}",
													"path": [
														"entries",
														"{{entryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Entry with entryId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{dpi}}",
													"path": [
														"entries",
														"{{entryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Entries",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"entries"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Entry",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"attrs\": [\r\n    {\r\n      \"id\": \"string\",\r\n      \"language\": \"EN\",\r\n      \"value\": \"Entry name\"\r\n    },\r\n    {\r\n      \"id\": \"string\",\r\n      \"language\": \"EN\",\r\n      \"value\": \"email@address.com\"\r\n    }\r\n  ],\r\n  \"groups\": [\r\n    {\r\n      \"id\": \"string\",\r\n      \"name\": \"Directory group name\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"entries"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Groups",
							"item": [
								{
									"name": "GET Groups",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/groups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"groups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Template",
							"item": [
								{
									"name": "GET Template",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/template",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"template"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/DPI.html](https://docs.cc.sinch.com/onpremise/fp19/api/DPI.html)"
				},
				{
					"name": "License Reporting Interface",
					"item": [
						{
							"name": "Contact",
							"item": [
								{
									"name": "GET Contacts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{lri}}/contact",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{lri}}",
											"path": [
												"contact"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Data",
							"item": [
								{
									"name": "GET Data",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{lri}}/data",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{lri}}",
											"path": [
												"data"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Report",
							"item": [
								{
									"name": "GET Report",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{lri}}/report",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{lri}}",
											"path": [
												"report"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/LRI.html](https://docs.cc.sinch.com/onpremise/fp19/api/LRI.html)"
				},
				{
					"name": "Monitoring Interface",
					"item": [
						{
							"name": "Agents",
							"item": [
								{
									"name": "{agentId}",
									"item": [
										{
											"name": "Presences",
											"item": [
												{
													"name": "GET Presence ID with agentId",
													"item": [
														{
															"name": "GET Presence ID with agentId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/presence/{{presenceId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rmi}}",
																	"path": [
																		"agents",
																		"{{agentId}}",
																		"presence",
																		"{{presenceId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update Presence with AgentId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/presence/{{presenceId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rmi}}",
																	"path": [
																		"agents",
																		"{{agentId}}",
																		"presence",
																		"{{presenceId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Presence Profiles with agentId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/presences",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"agents",
																"{{agentId}}",
																"presences"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Queues",
											"item": [
												{
													"name": "{queueId}",
													"item": [
														{
															"name": "GET Queue ID with agentId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/queues/{{queueId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rmi}}",
																	"path": [
																		"agents",
																		"{{agentId}}",
																		"queues",
																		"{{queueId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update Queue with agentId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/queues/{{queueId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rmi}}",
																	"path": [
																		"agents",
																		"{{agentId}}",
																		"queues",
																		"{{queueId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Queues with agentId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/queues",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"agents",
																"{{agentId}}",
																"queues"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Ready State",
											"item": [
												{
													"name": "GET Ready State with agentId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/readyState",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"agents",
																"{{agentId}}",
																"readyState"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Ready State with agentId",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/readyState",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"agents",
																"{{agentId}}",
																"readyState"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Agent with agentId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"agents",
														"{{agentId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Agents",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"agents"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Contact Summaries",
							"item": [
								{
									"name": "{contactSummariesId}",
									"item": [
										{
											"name": "GET Contact Summary with contactSummariesId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contactSummaries/{{contactSummaryId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"contactSummaries",
														"{{contactSummaryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Contact Summaries",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contactSummaries",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"contactSummaries"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Contacts",
							"item": [
								{
									"name": "{contactId}",
									"item": [
										{
											"name": "Details",
											"item": [
												{
													"name": "GET Contact Details with contactId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contacts/{{contactId}}/details",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"details"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Event",
											"item": [
												{
													"name": "New Request",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"event\":\"Close\"}"
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contacts/{{contactId}}/event",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"event"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Contact with contactId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contacts/{{contactId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"contacts",
														"{{contactId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Contacts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contacts",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queue Groups",
							"item": [
								{
									"name": "{queueGroupId}",
									"item": [
										{
											"name": "GET Queue Group ID with queueGroupId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/queueGroups/{{queueGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"queueGroups",
														"{{queueGroupId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Queue Groups",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/queueGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"queueGroups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queue Statuses",
							"item": [
								{
									"name": "{queueId}",
									"item": [
										{
											"name": "GET Queue Status with queueId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/queueStatuses/{{queueId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"queueStatuses",
														"{{queueId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Queue Statuses",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/queueStatuses",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"queueStatuses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Settings",
							"item": [
								{
									"name": "{settingsId}",
									"item": [
										{
											"name": "GET Settings with settingsId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/settings/{{settingsId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"settings",
														"{{settingsId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Settings with settingsId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/settings/{{settingsId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"settings",
														"{{settingsId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Settings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/settings",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Settings",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"string\",\r\n  \"uiLanguage\": \"string\",\r\n  \"value\": \"string\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/settings",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"settings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Statuses",
							"item": [
								{
									"name": "{userId}",
									"item": [
										{
											"name": "GET User Status with userId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/userStatuses/{{userId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"userStatuses",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET User Statuses",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/userStatuses",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"userStatuses"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/RMI.html](https://docs.cc.sinch.com/onpremise/fp19/api/RMI.html)"
				},
				{
					"name": "Outbound Campaign Interface",
					"item": [
						{
							"name": "Campaigns",
							"item": [
								{
									"name": "{campaignId}",
									"item": [
										{
											"name": "Customers",
											"item": [
												{
													"name": "{customerId}",
													"item": [
														{
															"name": "GET Customer with customerId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers/{{customerId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{obi}}",
																	"path": [
																		"campaigns",
																		"{{campaignId}}",
																		"customers",
																		"{{customerId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Customer from Campaign",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers/{{customerId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{obi}}",
																	"path": [
																		"campaigns",
																		"{{campaignId}}",
																		"customers",
																		"{{customerId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Get Customers with campaignId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{obi}}",
															"path": [
																"campaigns",
																"{{campaignId}}",
																"customers"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Customer",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"attributes\": {\r\n    \"attribute\": [\r\n      {\r\n        \"name\": \"string\",\r\n        \"value\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"string\",\r\n        \"value\": \"string\"\r\n      }\r\n    ]\r\n  },\r\n  \"externalId\": \"string\",\r\n  \"numbers\": \"string\",\r\n  \"timeZone\": \"string\"\r\n}"
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{obi}}",
															"path": [
																"campaigns",
																"{{campaignId}}",
																"customers"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Status",
											"item": [
												{
													"name": "Set Campaign Status",
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "Active"
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/status",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{obi}}",
															"path": [
																"campaigns",
																"{{campaignId}}",
																"status"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "List",
											"item": [
												{
													"name": "POST New Customers to Campaign with Id",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers/list",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{obi}}",
															"path": [
																"campaigns",
																"{{campaignId}}",
																"customers",
																"list"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Campaign with campaignId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{obi}}",
													"path": [
														"campaigns",
														"{{campaignId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "campaigns",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{obi}}",
											"path": [
												"campaigns"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/OBI.html](https://docs.cc.sinch.com/onpremise/fp19/api/OBI.html)"
				},
				{
					"name": "Taskmanager Interface",
					"item": [
						{
							"name": "Tasks",
							"item": [
								{
									"name": "Count",
									"item": [
										{
											"name": "GET Task count",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks/count",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rti}}",
													"path": [
														"tasks",
														"count"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "{taskId}",
									"item": [
										{
											"name": "GET Task with ID",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks/{{taskId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rti}}",
													"path": [
														"tasks",
														"{{taskId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Task with ID",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks/{{taskId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rti}}",
													"path": [
														"tasks",
														"{{taskId}}"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Task with ID",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks/{{taskId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rti}}",
													"path": [
														"tasks",
														"{{taskId}}"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "tasks",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rti}}",
											"path": [
												"tasks"
											],
											"query": [
												{
													"key": "status",
													"value": "Open",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "XRI Task",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"data\":{\r\n\t\"item\":{\r\n\t\t\"type\":\"XRI\",\r\n\t\t\"queue\":\"47206108A1704DC29CEA7B7F7B19463F\"\r\n\t\t},\r\n\t\t\t\"subject\":\"Alder testib POSTi\",\r\n\t\t\t\"body\":\"Simple XRI Task\",\r\n\t\t\t\"fromAddress\":\"alder.tsvetkov@telia.ee\"\r\n\t\t}\r\n}"
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rti}}",
											"path": [
												"tasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "EMAIL Task",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"data\":{\r\n\t\"item\":{\r\n\t\t\"type\":\"EMAIL\",\r\n\t\t\"queue\":\"556F17F92D04493AB38B58CDF372E6F7\"\r\n\t\t},\r\n\t\t\t\"subject\":\"Alder testib POSTi\",\r\n\t\t\t\"body\":\"Simple E-mail Task\",\r\n\t\t\t\"fromAddress\":\"alder.tsvetkov@telia.ee\"\r\n\t\t}\r\n}"
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rti}}",
											"path": [
												"tasks"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/RTI.html](https://docs.cc.sinch.com/onpremise/fp19/api/RTI.html)"
				}
			],
			"description": "[https://docs.cc.sinch.com/onpremise/fp19/api.html](https://docs.cc.sinch.com/onpremise/fp19/api.html)"
		},
		{
			"name": "FP20",
			"item": [
				{
					"name": "Analytics Interface",
					"item": [
						{
							"name": "agentHistory",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/agentHistory?startTime=&endTime=",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"agentHistory"
									],
									"query": [
										{
											"key": "startTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										},
										{
											"key": "endTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "agentStatistics",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/agentStatistics?startTime",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"agentStatistics"
									],
									"query": [
										{
											"key": "startTime",
											"value": null,
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "agentStatus",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/agentStatus?startTime",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"agentStatus"
									],
									"query": [
										{
											"key": "startTime",
											"value": null,
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "agentStatusHistory",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/agentStatusHistory?startTime=",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"agentStatusHistory"
									],
									"query": [
										{
											"key": "startTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "contactHistory",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/contactHistory?startTime=&endTime",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"contactHistory"
									],
									"query": [
										{
											"key": "startTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										},
										{
											"key": "endTime",
											"value": null,
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "contactStatistic",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}{{url}}:{{port}}{{rai}}/contactStatistic?startTime=",
									"host": [
										"{{protocol}}{{url}}"
									],
									"port": "{{port}}{{rai}}",
									"path": [
										"contactStatistic"
									],
									"query": [
										{
											"key": "startTime",
											"value": "",
											"description": "Required: YYYY-MM-DDTHH:MM:SS.000Z"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp20/api/RAI.html](https://docs.cc.sinch.com/onpremise/fp19/api/RAI.html#)"
				},
				{
					"name": "Configuration Interface",
					"item": [
						{
							"name": "Audio Prompts",
							"item": [
								{
									"name": "{audioPromptId}",
									"item": [
										{
											"name": "GET Audio Prompt with audioPromptId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/audioPrompts/{{audioPromptId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"audioPrompts",
														"{{audioPromptId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Audio Prompts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/audioPrompts",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"audioPrompts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CP Extensions",
							"item": [
								{
									"name": "{cpExtensionId}",
									"item": [
										{
											"name": "GET CP Extension with cpExtensionId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/cpExtension/{{cpExtensionId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"cpExtension",
														"{{cpExtensionId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET CP Extensions",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/cpExtensions",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"cpExtensions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Custom IVRs",
							"item": [
								{
									"name": "{customIvrId}",
									"item": [
										{
											"name": "Attributes",
											"item": [
												{
													"name": "GET Attributes with customIvrId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"attributes"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Attributes",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Name\",\r\n    \"language\": \"EN\",\r\n    \"value\": \"Advanced\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"attributes"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Current Source Code Version",
											"item": [
												{
													"name": "GET Current Source Code Version with customIvrId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/currentSourceCodeVersion",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"currentSourceCodeVersion"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Source Codes",
											"item": [
												{
													"name": "{sourceCodeId}",
													"item": [
														{
															"name": "GET Source Code with sourceCodeId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/sourceCodes/{{sourceCodeId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"customIvrs",
																		"{{customIvrId}}",
																		"sourceCodes",
																		"{{sourceCodeId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Source Codes with customIvrId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/sourceCodes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"sourceCodes"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Parameters",
											"item": [
												{
													"name": "GET Parameters for IVR with Id",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/parameters",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"parameters"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Parameters for IVR with Id",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"string\",\r\n    \"value\": \"string\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}/parameters",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"customIvrs",
																"{{customIvrId}}",
																"parameters"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Custom IVR with customIvrId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs/{{customIvrId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"customIvrs",
														"{{customIvrId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Custom IVRs",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/customIvrs",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"customIvrs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Disruption Sets",
							"item": [
								{
									"name": "{disruptionSetId}",
									"item": [
										{
											"name": "Events",
											"item": [
												{
													"name": "{eventId}",
													"item": [
														{
															"name": "GET Disruption Set Event with eventId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events/{{eventId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"{{disruptionSetId}}",
																		"events",
																		"{{eventId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "POST New Event with eventId",
															"request": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events/{{eventId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"{{disruptionSetId}}",
																		"events",
																		"{{eventId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Event with eventId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events/{{eventId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"{{disruptionSetId}}",
																		"events",
																		"{{eventId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Bulk",
													"item": [
														{
															"name": "DELETE Event Bulk",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/events/bulk",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"events",
																		"bulk"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Events with disruptionSetId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"disruptionSets",
																"{{disruptionSetId}}",
																"events"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Event with disruptionSetId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"activeFrom\": \"string\",\r\n  \"activeTo\": \"string\",\r\n  \"items\": {\r\n      \"item\": [\r\n          {\r\n              \"id\": \"string\"\r\n          },\r\n          {\r\n              \"id\": \"string\"\r\n          },\r\n          {\r\n              \"id\": \"string\"\r\n          }\r\n      ]\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/events",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"disruptionSets",
																"{{disruptionSetId}}",
																"events"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Items",
											"item": [
												{
													"name": "{itemId}",
													"item": [
														{
															"name": "GET Disruption Set Item with itemId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/items/{{itemId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"disruptionSets",
																		"{{disruptionSetId}}",
																		"items",
																		"{{itemId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Items with disruptionSetId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}/items",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"disruptionSets",
																"{{disruptionSetId}}",
																"items"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Disruption Set with disruptionSetId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets/{{disruptionSetId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"disruptionSets",
														"{{disruptionSetId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Disruption Sets",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/disruptionSets",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"disruptionSets"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Messaging Services",
							"item": [
								{
									"name": "{messagingServiceId}",
									"item": [
										{
											"name": "Authentications",
											"item": [
												{
													"name": "{authenticationId}",
													"item": [
														{
															"name": "GET Messaging Service Authentication with authenticationId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications/{{authenticationId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"messagingServices",
																		"{{messagingServiceId}}",
																		"authentications",
																		"{{authenticationId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update Messaging Service Authentication with authenticationId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications/{{authenticationId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"messagingServices",
																		"{{messagingServiceId}}",
																		"authentications",
																		"{{authenticationId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Messaging Service Authentication with authenticationId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications/{{authenticationId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"messagingServices",
																		"{{messagingServiceId}}",
																		"authentications",
																		"{{authenticationId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Authentications with messagingServiceId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"messagingServices",
																"{{messagingServiceId}}",
																"authentications"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Authentication with messagingServiceId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"authenticationId\":\"string\",\r\n   \"password\":\"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}/authentications",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"messagingServices",
																"{{messagingServiceId}}",
																"authentications"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Messaging Service with messagingServiceId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"messagingServices",
														"{{messagingServiceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Messaging Service with messagingServiceId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"messagingServices",
														"{{messagingServiceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Messaging Service with messagingServiceId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices/{{messagingServiceId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"messagingServices",
														"{{messagingServiceId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Messaging Services",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"messagingServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Messaging Service",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"facebook\",\r\n  \"name\": \"Facebook connection\",\r\n  \"connection\": \"https://serviceaddress/\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/messagingServices",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"messagingServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Presence Profiles",
							"item": [
								{
									"name": "{prsProfileId}",
									"item": [
										{
											"name": "GET Presence Profile with prsProfileId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/prsProfiles/{{prsProfileId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"prsProfiles",
														"{{prsProfileId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Presence Profiles",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/prsProfiles",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"prsProfiles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queues",
							"item": [
								{
									"name": "{queueId}",
									"item": [
										{
											"name": "Attributes",
											"item": [
												{
													"name": "GET Queue Attributes with queueId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"attributes"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Queue Attributes with queueId",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"attributes"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Extensions",
											"item": [
												{
													"name": "{extensionId}",
													"item": [
														{
															"name": "GET Queue Extension with extensionId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions/{{extensionId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"extensions",
																		"{{extensionId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update Queue Extension with extensionId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions/{{extensionId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"extensions",
																		"{{extensionId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Queue Extension with extensionId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions/{{extensionId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"extensions",
																		"{{extensionId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Queue Extensions with queueId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"extensions"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Queue Extensions with queueId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"address\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/extensions",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"extensions"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Queue Groups",
											"item": [
												{
													"name": "{queueGroupId}",
													"item": [
														{
															"name": "GET Queue Group with queueGroupId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/queueGroups/{{queueGroupId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"queueGroups",
																		"{{queueGroupId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Queue Group with queueGroupId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/queueGroups/{{queueGroupId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queues",
																		"{{queueId}}",
																		"queueGroups",
																		"{{queueGroupId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Queue Groups with queueId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/queueGroups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"queueGroups"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST Queue Group with queueId",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}/queueGroups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queues",
																"{{queueId}}",
																"queueGroups"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Queue with queueId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queues",
														"{{queueId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Queue with queueId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queues",
														"{{queueId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Queue with queueId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues/{{queueId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queues",
														"{{queueId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Queues",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"queues"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Queue",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"string\",\r\n  \"name\":  \"string\",\r\n  \"description\": \"string\",\r\n  \"loginType\": \"string\",\r\n  \"synchronised\": true,\r\n  \"forwardNumber\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queues",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"queues"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queue Groups",
							"item": [
								{
									"name": "{queueGroupId}",
									"item": [
										{
											"name": "Attributes",
											"item": [
												{
													"name": "GET Queue Group Attributes with queueGroupId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queueGroups",
																"{{queueGroupId}}",
																"attributes"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Queue Group Attributes with queueGroupId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"string\",\r\n    \"language\": \"string\",\r\n    \"value\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/attributes",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queueGroups",
																"{{queueGroupId}}",
																"attributes"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Queues",
											"item": [
												{
													"name": "{queueId}",
													"item": [
														{
															"name": "GET Queue Group Queue with queueId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/queues/{{queueId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queueGroups",
																		"{{queueGroupId}}",
																		"queues",
																		"{{queueId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Queue Group Queue with queueId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/queues/{{queueId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"queueGroups",
																		"{{queueGroupId}}",
																		"queues",
																		"{{queueId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Queue Group Queues with queueGroupId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/queues",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queueGroups",
																"{{queueGroupId}}",
																"queues"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Queue to Queue Group with queueGroupId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}/queues",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"queueGroups",
																"{{queueGroupId}}",
																"queues"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Queue Groups with queueGroupId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queueGroups",
														"{{queueGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Queue Group with queueGroupId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queueGroups",
														"{{queueGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Queue Group with queueGroupId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups/{{queueGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"queueGroups",
														"{{queueGroupId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Queue Groups",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"queueGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Queue Group",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"name\": \"string\",\r\n    \"description\": \"string\"\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/queueGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"queueGroups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reply Templates",
							"item": [
								{
									"name": "{replyTemplateId}",
									"item": [
										{
											"name": "Attachments",
											"item": [
												{
													"name": "{attachmentId}",
													"item": [
														{
															"name": "GET Reply Template Attachment with attachmentId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/replyTemplates/{{replyTemplateId}}/attachments/{{attachmentId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"replyTemplates",
																		"{{replyTemplateId}}",
																		"attachments",
																		"{{attachmentId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Reply Template Attachments with replayTemplateId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/replyTemplates/{{replyTemplateId}}/attachments",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"replyTemplates",
																"{{replyTemplateId}}",
																"attachments"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Reply Template with replyTemplateId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/replyTemplates/{{replyTemplateId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"replyTemplates",
														"{{replyTemplateId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Reply Templates",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/replyTemplates",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"replyTemplates"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Roles",
							"item": [
								{
									"name": "{roleId}",
									"item": [
										{
											"name": "Users",
											"item": [
												{
													"name": "{userId}",
													"item": [
														{
															"name": "GET Role User with userId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}/users/{{userId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"roles",
																		"{{roleId}}",
																		"users",
																		"{{userId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Role User with userId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}/users/{{userId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"roles",
																		"{{roleId}}",
																		"users",
																		"{{userId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Role Users with roleId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}/users",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"roles",
																"{{roleId}}",
																"users"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User with roleId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"surname\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}/users",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"roles",
																"{{roleId}}",
																"users"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Role with roleId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"roles",
														"{{roleId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Role with roleId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"roles",
														"{{roleId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Role with roleId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles/{{roleId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"roles",
														"{{roleId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Roles",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Role",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\":\"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/roles",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"roles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Skills",
							"item": [
								{
									"name": "{skillId}",
									"item": [
										{
											"name": "GET Skill with skillId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills/{{skillId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"skills",
														"{{skillId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Skill with skillId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills/{{skillId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"skills",
														"{{skillId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Skill with skillId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills/{{skillId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"skills",
														"{{skillId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Skills",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"skills"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Skill",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/skills",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"skills"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Timezones",
							"item": [
								{
									"name": "{timeZoneId}",
									"item": [
										{
											"name": "GET Timezone with timeZoneId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/timeZones/{{timeZoneId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"timeZones",
														"{{timeZoneId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Timezones",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/timeZones",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"timeZones"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Users",
							"item": [
								{
									"name": "{userId}",
									"item": [
										{
											"name": "Certificates",
											"item": [
												{
													"name": "{certificateId}",
													"item": [
														{
															"name": "GET Certificate with certificateId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/certificates/{{certificateId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"certificates",
																		"{{certificateId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Certificate with certificateId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/certificates/{{certificateId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"certificates",
																		"{{certificateId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User Certificates with userId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/certificates",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"certificates"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Certificate with userId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\"subject\":\"string\",\r\n\"issuer\":\"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/certificates",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"certificates"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Roles",
											"item": [
												{
													"name": "{roleId}",
													"item": [
														{
															"name": "GET User Role with roleId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/roles/{{roleId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"roles",
																		"{{roleId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE User Role with roleId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/roles/{{roleId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"roles",
																		"{{roleId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User Roles with userId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/roles",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"roles"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Role with userId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\":\"string\",\r\n    \"name\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/roles",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"roles"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Skills",
											"item": [
												{
													"name": "{skillId}",
													"item": [
														{
															"name": "GET User Skill with skillId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills/{{skillId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"skills",
																		"{{skillId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update User Skill with skillId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills/{{skillId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"skills",
																		"{{skillId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE User Skill with skillId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills/{{skillId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"skills",
																		"{{skillId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User Skills with userId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"skills"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Skill with userId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\":\"string\",\r\n    \"value\": 2\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/skills",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"skills"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "User Groups",
											"item": [
												{
													"name": "{userGroupId}",
													"item": [
														{
															"name": "GET User User Group with userGroupId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/userGroups/{{userGroupId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"userGroups",
																		"{{userGroupId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE User User Group with userGroupId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/userGroups/{{userGroupId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"users",
																		"{{userId}}",
																		"userGroups",
																		"{{userGroupId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User User Groups with userId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/userGroups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"userGroups"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Group to User with userId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\":\"string\",\r\n    \"name\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}/userGroups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"users",
																"{{userId}}",
																"userGroups"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET User with userId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update User with userId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE User with userId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users/{{userId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Users",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New User",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": \"string\",\r\n  \"surname\": \"string\",\r\n  \"login\": \"string\",\r\n  \"externalId\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"chat\": \"string\",\r\n  \"chatName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"uiLanguage\": \"string\",\r\n  \"promptLanguage\": \"string\",\r\n  \"timeZone\": \"string\",\r\n  \"synchronised\": true,\r\n  \"crmId\": \"string\",\r\n  \"businessObjectsId\": \"string\",\r\n  \"presenceId\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/users",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Groups",
							"item": [
								{
									"name": "{userGroupId}",
									"item": [
										{
											"name": "Users",
											"item": [
												{
													"name": "{userId}",
													"item": [
														{
															"name": "GET User Group User with userId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}/users/{{userId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"userGroups",
																		"{{userGroupId}}",
																		"users",
																		"{{userId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE User Group User with userId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}/users/{{userId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rci}}",
																	"path": [
																		"userGroups",
																		"{{userGroupId}}",
																		"users",
																		"{{userId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET User Group Users with userGroupId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}/users",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"userGroups",
																"{{userGroupId}}",
																"users"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User to User Group with userGroupId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\":\"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}/users",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"userGroups",
																"{{userGroupId}}",
																"users"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET User Group with userGroupId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userGroups",
														"{{userGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update User Group with userGroupId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userGroups",
														"{{userGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE User Group with userGroupId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups/{{userGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userGroups",
														"{{userGroupId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET User Groups",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userGroups"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New User Group",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"string\",\r\n  \"synchronised\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userGroups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Settings Template",
							"item": [
								{
									"name": "{userSettingsTemplateId}",
									"item": [
										{
											"name": "Settings",
											"item": [
												{
													"name": "GET User Settings Template Settings with Id",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}/settings",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"userSettingsTemplates",
																"{{userSettingsTemplateId}}",
																"settings"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New User Settings Template Setting with Id",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"string\",\r\n  \"value\": \"string\",\r\n  \"forced\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}/settings",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rci}}",
															"path": [
																"userSettingsTemplates",
																"{{userSettingsTemplateId}}",
																"settings"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET User Settings Template with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userSettingsTemplates",
														"{{userSettingsTemplateId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update User Settings Template with Id",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userSettingsTemplates",
														"{{userSettingsTemplateId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE User Settings Template with Id",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates/{{userSettingsTemplateId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userSettingsTemplates",
														"{{userSettingsTemplateId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET User Settings Templates",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userSettingsTemplates"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New User Settings Template",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userSettingsTemplates",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userSettingsTemplates"
											]
										},
										"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html#usersettingstemplates_post](https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html#usersettingstemplates_post)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scripts",
							"item": [
								{
									"name": "{scriptId}",
									"item": [
										{
											"name": "GET Script with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/scripts/{{scriptId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"scripts",
														"{{scriptId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Scripts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/scripts",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"scripts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Template Company",
							"item": [
								{
									"name": "POST Template Company",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"id\": \"string\",\r\n\"name\": \"string\",\r\n\"template\": \"TEMPLATE\",\r\n\"masterId\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/templateCompany",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"templateCompany"
											]
										},
										"description": "[https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html#templatecompany_post](https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html#templatecompany_post)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Jobs",
							"item": [
								{
									"name": "{jobId}",
									"item": [
										{
											"name": "GET Job with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/jobs/{{jobId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"jobs",
														"{{jobId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Job with Id",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/jobs/{{jobId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"jobs",
														"{{jobId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Jobs",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/jobs",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"jobs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Import",
							"item": [
								{
									"name": "Calendar",
									"item": [
										{
											"name": "POST New Calendar",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/calendar",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"calendar"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates calendars.\n\nFields:\n\n- Id - Can be used to update existing calendar.\n    \n- Name - Required. If Id is not used, then Name will identify the calendar (creates new if does not exist).\n    \n- Priority - Integer. Must be unique. The schedule with highest priority calendar, which matches the current date, is used for queue/user settings template/contact center.\n    \n- Weekdays - Calendar can have zero or one Weekdays columns. Format: MON,TUE,WED,THU,FRI,SAT,SUN.\n    \n- Day - Calendar can have multiple Day columns (or none). Format: \"MMDD:Description\". \":Description\" is optional.\n    \n- Range - Calendar can have multiple Range columns (or none). Format: \"YYYYMMDD-YYYYMMDD:Description\". \":Description\" is optional.\n    \n- Delete - Should be empty. Value 'D' will delete the calendar.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Priority;Weekdays;Day;Day;Day;Day;Day;Range;Range\nWorkdays;100;MON,TUE,WED,THU,FRI\nLeisure;123;SAT,SUN;0501:First of May;1224:Christmas Eve;;;;20160325-20160328:Easter holiday;20160624-20160626\nPublic Holidays in Finland;990;;1206;0101;1224;1226;1225\n\n ```"
								},
								{
									"name": "Campaign",
									"item": [
										{
											"name": "POST New Campaign",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/campaign",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"campaign"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates customers to an outbound campaign.\n\nFields for outbound customer:\n\n- ExternalId - Required, must be unique within campaign.\n    \n- Phone1, Phone2, Phone3 - Each customer can have up to 3 phone numbers. Phone1 is required.\n    \n- Priority - Optional integer value. Smaller priority is handled first. Otherwise customers are handled in ExternalId order.\n    \n- TimeZone - TimeZone for the customer (like 'Europe/Helsinki'). By default the campaign or system TimeZone is used.\n    \n- AgentLogin - Which agent should handle this customer. By default any agent.\n    \n- Date - When this customer should be handled (in UTC). Formats: \"yyyy-MM-dd HH:mm:ss.SSS\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy-MM-dd HH:mm\", \"yyyy-MM-dd\". By default empty, so that customer can be called at any time.\n    \n- Result - Used in export only. New customer will get 'CALL' result by default. Customer will get result such as 'SUCCESS' or 'REFUSAL' eventually.\n    \n- CallResult - Used in export only. Customer will get call result such as 'SUCCESS', 'REFUSAL', 'BUSY' or 'NOANSWER' eventually.\n    \n- Classifier - Used in export only. Customer will get classifier based on CallResult eventually.\n    \n- Amount - Used in export only. Customer might get monetary value if outbound UI supports such thing.\n    \n- CallCount - Used in export only. CallCount tells approximately how many times customer has been called. BUSY and NOANSWER will increment CallCount, while REDIAL will not.\n    \n- AgentNumber - Used in export only. This column will get the agent phone number in export.\n    \n- Delete - Should be empty. Value 'D' will delete the customer from campaign.\n    \n- Any other field: Customer attribute, such as Name or Company.\n    \n\nAn example of import file in tab-delimited text/plain format (.txt):\n\n```\nExternalId    Phone1    Name\n1    +5550001    Name1\n2    005550002    Name2\n\n ```"
								},
								{
									"name": "Configuration",
									"item": [
										{
											"name": "POST New Configuration",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/configuration",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"configuration"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job for configuration, which can include any other import:\n\n- Directory\n    \n- UserGroup\n    \n- Roles\n    \n- UserGroupHierarchy\n    \n- Queues\n    \n- Calendar\n    \n- Skills\n    \n- Presence\n    \n- OutboundCampaign\n    \n- OutboundBlockedNumbers\n    \n- Scripts\n    \n- Rights\n    \n\nConfiguration supports only Excel files:\n\n- .xls - application/vnd.ms-excel\n    \n- .xlsx - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\n    \n\nWorksheet name must match one of the supported imports (listed above). Each worksheet will be imported in left to right order.\n\nThe following query parameters are not supported:\n\n- validateOnly (CHECK)\n    \n- continueOnError (CONTINUEONERROR)\n    \n- importLanguage (LANGUAGE)\n    \n\nInstead these parameters can be given at the beginning of each Excel worksheet. First rows are considered parameters, if the first column is empty. Then the second column contains the parameter name, and the third column can contain the parameter value, if parameter can have a value. For example:\n\n```\nColumn#1    Column#2        Column#3\n(empty)     LANGUAGE        EN\n(empty)     CHECK           (empty)\n(empty)     CONTINUEONERROR (empty)\n\n ```\n\nBoolean parameters like CHECK and CONTINUEONERROR get value '1' (true) if value is not given. '0' is false (default value, if parameter is not given at all).\n\nSome imports need to have parameters defined:\n\n- Directory - either ID (directoryGroupId) or NAME (directoryGroupName) must be given\n    \n- UserGroup - either ID (userGroupId) or NAME (userGroupName) can be given, or alternatively UserGroup can be given in each row\n    \n- Queues - either ID (queueGroupId) or NAME (queueGroupName) can be given, or alternatively QueueGroup can be given in each row\n    \n- OutboundCampaign - either ID (campaignId) or NAME (campaignName) must be given\n    \n\nFirst row that has non-empty column#1 must have the column names for the actual import data."
								},
								{
									"name": "Consent",
									"item": [
										{
											"name": "POST New Consent",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/consent",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"consent"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates consents.\n\nFields:\n\n- Number - Phone number.\n    \n- Usage - 'recording' (default) or 'whatsapp'. Number and Usage together identify the consent.\n    \n- Consent - 1=true, 0=false (default).\n    \n- CreationTime - Optional datetime in format \"yyyy-MM-dd HH:mm:ss\\[.SSS\\]\".\n    \n- Delete - Should be empty. Value 'D' will delete the consent.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nNumber;Consent;CreationTime;Usage\n+555001;1;2022-01-10 14:26:51;recording\n555002;0\n\n ```"
								},
								{
									"name": "Directory",
									"item": [
										{
											"name": "POST New Directory",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/directory",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"directory"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates directory entries to a directory group.\n\nFields for directory entry:\n\n- Id - Can be used to update existing directory entry.\n    \n- ExternalId - Required by default, can be used to update existing directory entry using ID from external system. The query parameter requireIdOrExternalId is true by default, but if set to false, then it is possible to import entry without Id and ExternalId, but then it will always create a new entry (so it will create duplicates, if same file is imported twice).\n    \n- Delete - Should be empty. Value 'D' will remove the directory entry.\n    \n- Any other field: Directory attribute, such as 'Company Name'. If field is multi-lingual, then field can contain language code, like 'Company Name:EN'. Language code must be one of the standard two-letter language codes that can be seen in SC.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nExternalId;Company Name;Full Name;Last Name;First Name\n1;Company1;Full Name 1;Last Name 1;First Name 1\n2;Company2;Full Name 2;Last Name 2;First Name 1\n\n ```"
								},
								{
									"name": "Disruption Items",
									"item": [
										{
											"name": "POST New Disruption Items",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/disruptionItems",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"disruptionItems"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates disruption items to a disruption set.\n\nFields:\n\n- DisruptionSetExternalId - Required, disruption set external ID.\n    \n- DisruptionSetName - Optional, needed when inserting a new set.\n    \n- Id - Internal ID, can be used to update existing disruption item.\n    \n- ExternalId - Required, can be used to update existing disruption item.\n    \n- Type - Disruption item type, required, one of: WHERE,WHY,WHEN.\n    \n- Name - Disruption item name.\n    \n- Description - Disruption item description.\n    \n- PromptId - Optional, prompt internal ID.\n    \n- PromptExternalId - Optional, prompt external ID. Optionally use either PromptId or PromptExternalId.\n    \n- SayAsValue - Optional digits. Use IVRTalk instead of pre-recorded prompt.\n    \n- number: 100 => \"hundred\"digits: 100 => \"one zero zero\"ordinal: 100 => \"hundredth\"date: ddMM or ddMMyyyy, for example 0102 means \"the first of February\" or \"February first\"time: HHmm, for example 1530 means \"fifteen thirty\"datetime: ddMMHHmm or ddMMyyyyHHmm\n    \n- SayAsGender - Optional integer, one of: 0 (MASCULINE), 1 (FEMININE), 2 (NEUTER).\n    \n- SayAsDeclension - Optional integer, one of: 0 (NOMINATIVE), 1 (GENITIVE).\n    \n- Delete - Should be empty. Value 'D' will remove the disruption item.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nId;DisruptionSetExternalId;DisruptionSetName;Type;ExternalId;Name;Description;PromptExternalId;SayAsValue;SayAsDatatype\n;002;set2;WHERE;l011;Location 1;desc 1;;00230;digits\n;002;set2;WHY;c001;Cause 1;desc 2;prompt_007;;\n;002;set2;WHEN;tm1500;15:00;desc 3 äöäöäö;;1500;time\n\n ```"
								},
								{
									"name": "OB Blocked Numbers",
									"item": [
										{
											"name": "POST New OB Blocked Numbers",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/outboundBlockedNumbers",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"outboundBlockedNumbers"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or removes outbound campaign blocked phone numbers. These numbers won't be called by outbound campaign dialer. If outbound customer does not have any other phone number, then customer result will be NO_BNUMBERS_LEFT.\n\nFields:\n\n- Number - Number to be added. Any other characters than the plus sign (+) and digits from 0 to 9 are removed from the number.\n    \n- Delete - Should be empty. Value 'D' will remove the number.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nNumber;Delete\n+555001\n555002;D\n\n ```"
								},
								{
									"name": "Presence Profiles",
									"item": [
										{
											"name": "POST New Presence Profiles",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/presenceProfiles",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"presenceProfiles"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates presence profiles.\n\nFields:\n\n- Id - Can be used to update existing presence profile.\n    \n- Name - Required, identifies the presence profile if Id is not used.\n    \n- Reason - Required, one of: BUSINESSTRIP, BUSY, CHILDCARE, DUTY, LUNCH, MEETING, NONE, OFFDUTY, OFFICIAL, OTHER, PARENTAL, TEMPOUT, TRAINING, VACATION, VISIT, SICK, DAYOFF.\n    \n- BehaviorDefault - Required, one of: BUSY, FREEFORWARD, MOBILE, IVR, PASS, SWITCHBOARD, VOICEMAIL, USERFORWARD.\n    \n- Type - Required, one of: PRESENCE, ABSENCE, CONFERENCE.\n    \n- Duration - Required, one of: NONE, REST_DAY, 5_MINUTE, 10_MINUTE, 15_MINUTE, 30_MINUTE, 45_MINUTE, 1_HOUR, 2_HOUR, 3_HOUR, 4_HOUR, 5_HOUR, 6_HOUR, 7_HOUR, 8_HOUR, 9_HOUR, 10_HOUR, 11_HOUR, 12_HOUR, 1_DAY, 2_DAY, 3_DAY, 4_DAY, 5_DAY, 6_DAY, 1_WEEK, 2_WEEK, 3_WEEK, 4_WEEK.\n    \n- Priority - Required, integer >= 0.\n    \n- Availability - One of: AWAY, TENTATIVE, FREE.\n    \n- QueueGroup - Queue group name (agent is logged into these queues automatically).\n    \n- DurationRounding - Required, integer between 0 - 60 (minutes).\n    \n- BehaviorBusy - See BehaviorDefault for possible values. Can't be used with Type=CONFERENCE.\n    \n- BehaviorNotAnswered - See BehaviorDefault for possible values. Can't be used with Type=CONFERENCE.\n    \n- BehaviorLoggedOut - See BehaviorDefault for possible values. Can't be used with Type=CONFERENCE.\n    \n- FreeForwardNumber - Can't be used with Type=CONFERENCE.\n    \n- IvrGreetingType - Can't be used with Type=CONFERENCE.\n    \n- IvrOption1 - Can't be used with Type=CONFERENCE. Format: key;option. Because key and option are separated by ; character, then if text/csv format is used, then this column value must be quoted like \"2;VOICEMAIL\". Key is one of: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \\*, #. Option is one of: VOICEMAIL, MOBILE, SWITCHBOARD, USERFORWARD.\n    \n- IvrOption2 - See IvrOption1.\n    \n- IvrOption3 - See IvrOption1.\n    \n- IvrOption4 - See IvrOption1.\n    \n- Delete - Should be empty. Value 'D' will remove the presence profile.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Reason;BehaviorDefault;Type;Duration;Priority;Availability;QueueGroup;DurationRounding;BehaviorBusy;BehaviorNotAnswered;BehaviorLoggedOut;FreeForwardNumber;IvrGreetingType;IvrOption1;IvrOption2;IvrOption3;IvrOption4\nTEST_Default;NONE;PASS;PRESENCE;NONE;100;;;0;PASS;BUSY;BUSY;;;;;;\nTEST_Lunch;LUNCH;BUSY;ABSENCE;1_HOUR;100;;NOQUEUE;0;BUSY;BUSY;BUSY;;LUNCH;\"1;USERFORWARD\";\"2;VOICEMAIL\";;\nTEST_Sick leave;VACATION;IVR;ABSENCE;1_DAY;100;;;0;IVR;IVR;IVR;;;;;;\nTEST_Vacation;VACATION;IVR;ABSENCE;1_WEEK;100;;NOQUEUE;0;IVR;IVR;IVR;;;;;;\nTEST_Conference Call;NONE;;CONFERENCE;REST_DAY;100;;;5;;;;;;;;;\nTEST_Meeting;MEETING;VOICEMAIL;ABSENCE;1_HOUR;2;;;5;VOICEMAIL;VOICEMAIL;VOICEMAIL;;;;;;\nTEST_Businesstrip;BUSINESSTRIP;IVR;ABSENCE;REST_DAY;100;;;5;IVR;BUSY;IVR;;BUSINESSTRIP;\"1;VOICEMAIL\";\"2;MOBILE\";\"3;SWITCHBOARD\";\"4;USERFORWARD\"\nTEST_Away;TEMPOUT;IVR;PRESENCE;15_MINUTE;100;;;0;IVR;BUSY;IVR;;TEMPOUT;;;;\nTEST_Lunch;LUNCH;BUSY;ABSENCE;1_HOUR;100;;NOQUEUE;0;BUSY;BUSY;BUSY;;LUNCH;\"1;USERFORWARD\";\"2;VOICEMAIL\";;\nTEST_Conffis;NONE;IVR;CONFERENCE;1_HOUR;100;;;5\n\n ```"
								},
								{
									"name": "Queues",
									"item": [
										{
											"name": "POST New Queues",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/queues",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"queues"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates queues to a queue group.\n\nFields grouped same way as in SC. If setting is only used with certain queue type, then there is (phone), (email) or (chat).\n\nBasics:\n\n- Type - One of: Phone, Email, Chat. Type can't be changed for existing queue.\n    \n- Name - Identifies the queue if Id is not used. Creates new if does not exist already.\n    \n- Description - Queue description.\n    \n- Ordinal - Integer.\n    \n- Language - Prompt language, one of supported two letter language codes or a custom language configured in SC.\n    \n- TimeZone - One of supported time zones like 'Europe/Helsinki'.\n    \n- CriticalTime - Integer seconds, email critical time (email).\n    \n- LoginType - One of: AutoAllocation (default), HuntGroup.\n    \n- WarningTime - Integer seconds, email warning time (email).\n    \n- Id - Can be used to update existing queue.\n    \n- RingbackTime - Integer seconds, phone ringing time (phone).\n    \n- (Script not supported)\n    \n- (Opening Type not supported)\n    \n- Synchronised - Is this queue synchronized to directory, one of: 1 (true), 0 (false).\n    \n\nNumbers/Addresses:\n\n- Address - Queue can have multiple addresses (there can be multiple Address columns). Phone queue address can contain only digits. Email queue address must be a valid email address. Chat queue address must contain @ character. Address is used as identifier, so it can't be modified. Changing address will add another address to queue, unless REPLACEADDRESSES=1 parameter is given, in which case the old address is removed (default).\n    \n\nContact Management:\n\n- Priority - Integer.\n    \n- QueueLength - Integer, queue size.\n    \n- MaxPickTimeout - Integer milliseconds, timeout for contacts to be picked or rejected, default value 120000 (2 minutes).\n    \n- EarlyQueuing - 1 (on, default) or 0 (off) (phone).\n    \n- ClearOldSkills - 1 or 0. Recording (phone):\n    \n- ServerRecording - Record queue calls (phone): 0 (off), 1 (on)\n    \n- RecordingConsentOption - Recording behavior with consents (phone): 0 (ignore consents), 1 (ask for and follow customer consent, default)\n    \n- RecordingConsentNumber - Consent IVR number (phone).\n    \n\nForwarding:\n\n- DefaultQueue - Address of other queue.\n    \n- MaxWaitTimeInQueue - Integer seconds.\n    \n- QueueFullIfNoDest - One of: MaxWaitingTime, NoServingAgents, NoFreeAgents.\n    \n- ForwardOnServiceClosed - Address of other queue (phone).\n    \n- LetScheduleClosed - 1 or 0, Routing to Closed Overflow Queue (phone).\n    \n- LeaveVoiceMessageChar - DTMF character for forwarding (phone).\n    \n- ForwardOnUserInput - Forwarding number after DTMF character (phone).\n    \n- ForwardOnServiceClosing - Forwarding destination for scheduled queue close, address of other queue.\n    \n- QCBQueueNumber - Callback queue number (phone).\n    \n- ForwardEnabled - Enable instant forwarding (phone), one of: 1 (true), 0 (false).\n    \n- ForwardNumber - Instant forwarding number (phone).\n    \n\nContact Management continues:\n\n- IfNoAnsAddToRejNbrs - Block rejected contact from agent (phone) (chat), one of: 1 (yes, default), -2 (never), 0 (no blocking if contact redirected after max waiting time).\n    \n- IfNoAnsAddToRejNbrs - Block rejected contact from agent (email), one of: 0 (no, default), 1 (yes).\n    \n- BusyWhenWrapUp - Busy during wrap-up (chat): 0 (off, default), 1 (on).\n    \n- QueueLenSlope - Number of agents affect queue size, default 0.0 (phone).\n    \n- MaxPrefOperWait - Integer milliseconds, max. waiting time for preferred agent, default 40000 (phone).\n    \n- QueUseEntryTime - Reference timestamp for calculating queuing time (phone), one of: ORIG_CC (call enters contact center first time, default), ORIG (CEM receives call information), CURR_APP (call's last entry to contact center), CURR (call enters queue)\n    \n- QueLWTDDependencies - Queues used for long-term waiting time (phone).\n    \n- ExtAgentShowCaller - Original source number shown to external agents and MTD devices (phone), one of: 0 (off, default), 1 (on).\n    \n\nTransfer (phone):\n\n- HoldTransferWhenBusy - Enable transfer-on-hold when busy (phone), one of: 0 (no transfer-on-hold if target is busy) 1 (transfer-on-hold if target is mobile) 2 (always enable transfer-on-hold, default)\n    \n- HoldTransferTimeout - Integer milliseconds, default 3600000 (1 hour), timeout for transfer-on-hold (phone).\n    \n- UseJoinTransfer - Enable join transfer, 0 (no, default), 1 (use when transferring to external number) (phone).\n    \n- JoinTransferTimeout - Integer milliseconds, default 30000 (phone).\n    \n- UseInternalTransferBarring - Enable barring of internal transfers (phone), one of: 0 (off, default), 1 (on).\n    \n\nOpt-in IVR settings (phone):\n\n- OptInActive - Activate opt-in IVR (phone): 0 (off), 1 (on).\n    \n- OptInNumber - Opt-in IVR number (phone).\n    \n\nContact Management continues:\n\n- OverrideEmails - Allow other contacts while email open (email), one of: 0 (no, default), 1 (yes).\n    \n- ExtraDataWhenAllocated - Extra data included when e-mail allocated (email).\n    \n\nWeight Value Settings:\n\n- QuePriorityWeightLocalCall - Float, importance of contact when on same CEM as agent, default 1.00, one of: 1.00, 1.05, 1.10, 1.15, 1.20, 1.25, 1.30.\n    \n- QuePriorityWeightLocalOper - Float, importance of agent when on same CEM as contact, default 1.00, one of: 1.00, 1.05, 1.10, 1.15, 1.20, 1.25, 1.30.\n    \n\nE-Mail Settings (email):\n\n- DefaultEmailReplyAddress - Default sender address (email).\n    \n- Ch_AcceptTimeLimit - Integer seconds, default 62, (email).\n    \n- UseRequiredAgent - Use required agent instead of preferred agent (email): 0 (off), 1 (on).\n    \n- RequiredAgentExpiryTime - Integer seconds, default 60, default expiry time for required agent (email).\n    \n- Ch_PrefAgent - Preferred agent, one of: 0 (off), 1 (on, default) (email).\n    \n- AllowPickingReqRefEmails - Allow picking by other Communication Panel agents (email): 0 (off), 1 (on).\n    \n- Ch_DoCreateTask - Block e-mail from addresses (email).\n    \n- DisableMailChannel - Close e-mail queue (email), one of: 0 (no, default), 1 (yes).\n    \n- Ch_CustInfo - Customer information, (email).\n    \n- Ch_Language - Language definition method, (email).\n    \n- Ch_Priority - Priority definition method (email).\n    \n- DeleteOldMailsAfterDays - Integer days, old e-mails deleted after (email), default -1 (disabled).\n    \n- MaxMailSizeKb - Integer kilobytes, max. size of incoming email (email)\n    \n\nReporting and monitoring:\n\n- FalseAttemptTime - Integer seconds, false-attempt limit, default 5.\n    \n- AnsweredOnTime - Integer seconds, answered-on-time limit, default 20.\n    \n- AnsweredOnTimeCBR - Integer seconds, answered-on-time limit for callback requests (phone).\n    \n- FalseAttemptTimeCBR - Integer seconds, false-attempt limit for callback requests (phone).\n    \n- MaxTalkTime - Integer seconds, max. handling time, default 36000 (10 hours).\n    \n- MaxWaitTime - Integer seconds, max. waiting time, default 18000 (5 hours).\n    \n\nPrompts (phone) (chat):\n\n- QuePositionPromptWeight - Queue position multiplier (phone) (chat).\n    \n- EstWaitTimePromptWeight - Waiting time multiplier (phone) (chat).\n    \n- MaxCountQueueFullMessages - No. of times QueueFull is played (phone).\n    \n- MaxCountServiceClosedMessages - No. of times ServiceClosed is played (phone).\n    \n- EstWaitTimePromptLimits - Limit values for waiting time (phone) (chat). Format: \"min,max\", where both min and max are integers (min < max, min >= 0).\n    \n- QuePositionPromptLimits - Limit values for queue position (phone) (chat). Format: \"min,max\", where both min and max are integers (min < max, min >= 0).\n    \n- ServingAgentsPromptLimits - Limit values for agents serving in queue (phone) (chat). Format: \"min,max\", where both min and max are integers (min < max, min >= 0).\n    \n\nQueue Groups:\n\n- QueueGroup - Queue can be added to another groups as well. There can be multiple QueueGroup columns. If parameter REPLACE_GROUPS=1, then queue is removed from other groups not included in this import.\n    \n\nSkills:\n\n- Skill - Queue can have multiple skill requirements (columns). Each requirement is in format: skill=value. Value is integer, 0 means that requirement is deleted.\n    \n\nSkill Reduction:\n\n- DisableSkillAdjustment - Use absolut waiting time: 0 (off), 1 (on, default).\n    \n\nVoicemail and Notification Call Settings (phone):\n\n- Voicemail - Voice mail number (phone).\n    \n- VoiceMailInQueueFull - Transfer to voicemail if queue is full: 0 (off, default), 1 (on).\n    \n\nExternal Agent (phone):\n\n- ExtAgentMaxAnswerWaitTime - Integer milliseconds, default 30000, max. answer waiting time (phone).\n    \n- ExtAgentPlayAcceptQuestion - Require confirmation (phone), one of: 1 (on default), 0 (off).\n    \n- ExtAgentMaxDTMFWaitTime - Integer milliseconds, default 15000, max. waiting time for confirmation (phone).\n    \n- ExtAgentAcceptChar - Accepting character, default # (phone).\n    \n- ExtAgentRejectChar - Rejecting character, default 3 (phone).\n    \n\nCDT Settings:\n\n- AfterworkUsage - Activate wrap-up status automatically: 0 (off), 1 (on).\n    \n- AutoPaperwork - Activate not-ready status after rejecting contact: 0 (off), 1 (on).\n    \n- AutoPWTime - Integer seconds, wrap-up time.\n    \n- UseRestingAfterScripting - Use rest time after scripting: 0 (off), 1 (on).\n    \n- (AnswerTemplate not supported (Default reply template) (email) (chat))\n    \n- TalkTimeLimit - Integer seconds, handling time limit.\n    \n- SearchGroup - Target directory for searches.\n    \n- AnswerInfo - Queue contact information.\n    \n\nIntegration Settings:\n\n- OII - Enable OII integration: 0 (off), 1 (on, default).\n    \n- CrmCodUrl - SAP Service Cloud (C4C) integration URL.\n    \n- CrmLink - Launch application or URL (phone).\n    \n\nThreshold Values for Queue Statistics:\n\n- MaxWaitTimeCriticalLevel - Integer seconds, critical level of queuing time.\n    \n- MaxWaitTimeWarningLevel - Integer seconds, warning level of queuing time.\n    \n- InteractionsCriticalLevel - Integer, critical level of queuing conversations.\n    \n- InteractionsWarningLevel - Integer, warning level of queuing conversations.\n    \n- ServiceLevelCriticalLevel - Integer, critical level of service level.\n    \n- ServiceLevelWarningLevel - Integer, warning level of service level.\n    \n- ServingAgentCriticalLevel - Integer, critical level of serving agents.\n    \n- ServingAgentWarningLevel - Integer, warning level of serving agents.\n    \n- FreeAgentCriticalLevel - Integer, critical level of free agents.\n    \n- FreeAgentWarningLevel - Integer, warning level of free agents.\n    \n\nPersonal Data Retention Time\n\n- PersonalDataRetention - Integer days, must be less than channel level setting (which must be configured).\n    \n\nOther fields:\n\n- Any other queue parameter, listed separately below.\n    \n- Any other field: Valid directory field (if Synchronized=1). Name is synchronized to \"Queue Name\" automatically by BJS.\n    \n- Delete - Should be empty. Value 'D' will remove the queue.\n    \n\nAdditional queue parameters:\n\n- MaxTotalUnhandledTasks - Integer, max. handled of unhandled e-mails (email). Only available as email channel parameter in SC.\n    \n- ChatIdleTimeout - Integer seconds, default 600, timeout for idle chats. Only available as chat channel parameter in SC.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nType;Name;Address\nPhone;Test phone queue;50000\n\n ```"
								},
								{
									"name": "Rights",
									"item": [
										{
											"name": "POST New Rights",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/rights",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"rights"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds, updates or deletes rights. Right is deleted if there are no enabled access types.\n\nFields:\n\n- SubjectType - Required, one of: User, Role, UserGroup\n    \n- SubjectName - Required, name of the subject (User/Role/UserGroup)\n    \n- ObjectType - Required, one of system API object names, like: User, Queue, QueueGroup, UserService, UserSettingsProfile.\n    \n- ObjectName - Required, name of the object, or \"(ALL)\" if class level right, or \"(SELF)\" if self right.\n    \n- Predicate - Usually empty, but can contain ObjectType, for example if ObjectType=User, then Predicate can be LoginAuthenticationInfo. Multiple predicates are separated by comma.\n    \n- Type - Required, one of: ACCESS, GRANT\n    \n- Id - Can be used to identify existing right. Otherwise the right is identified by: subject, object, Type, Predicate.\n    \n- SubjectId - With SubjectType, can be used to identify subject. Otherwise the subject is identified by SubjectName.\n    \n- ObjectId - With ObjectType, can be used to identify the object. Otherwise the object is identified by ObjectName.\n    \n\nAccess types are enabled by having value X. If value is empty, then that access type is disabled.\n\n- View - View object.\n    \n- Modify - Modify object.\n    \n- Create - Create object.\n    \n- Delete - Delete object.\n    \n- Use - Use object.\n    \n- ManageRights - Manage rights\n    \n- ManageMembers - Manage members.\n    \n- Serve - Serve in queue.\n    \n- ControlContact - Control contact (supervisor).\n    \n- BargeIn - Barge-in (supervisor).\n    \n- Listen - Listen (supervisor).\n    \n- Coach - Coach (supervisor).\n    \n- LogOnToQueues - Log on agents to queues (supervisor).\n    \n- StatisticsSummary - Statistics summary.\n    \n- StatisticsDetails - Statistics details.\n    \n- ListenToRecording - Listen to recording.\n    \n- ManageContactHistory - Manage contact history.\n    \n- ManageVoicemails - Manage voicemails.\n    \n- ManagePresence - Manage presence.\n    \n- Messaging - Messaging.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nSubjectType;SubjectName;ObjectType;ObjectName;Predicate;Type;View;Modify;Create;Delete\nRole;Advanced Monitoring User;Skill;(ALL);;ACCESS;X;;;\n\n ```\n\nThis example adds only View right for \"Advanced Monitoring User\" role to all skills (other possible access types for this right are removed, even those not listed in header)."
								},
								{
									"name": "Roles",
									"item": [
										{
											"name": "POST New Roles",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/roles",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"roles"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates roles.\n\nFields:\n\n- Name - Required.\n    \n- Description\n    \n- Delete - Should be empty. Value 'D' will remove the role.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Description\nRole name;Role description\n\n ```"
								},
								{
									"name": "Scripts",
									"item": [
										{
											"name": "POST New Scripts",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/scripts",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"scripts"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates scripts. Each row is one of the following:\n\n- Script - If row has Name, it identifies the script.\n    \n- Question - If row has Ordinal, it identifies the question for the previous script.\n    \n- Answer - If row has AnswerOrdinal, it identifies the answer for the previous question.\n    \n\nFields for script:\n\n- Name - Required for script row, identifies the script.\n    \n- Type - Required for script row, one of: STATIC, INTERACTIVE, CALLBACK.\n    \n- Remarks - Script remarks.\n    \n- LockFirstQuestion - Show first question always on top: 0 (off), 1 (on).\n    \n\nFields for question:\n\n- Ordinal - Required for question row, identifies the question within the previous script.\n    \n- Question - Required for question row. Text for the actual question.\n    \n- NextOrdinal - Next question ordinal. Can be used only in INTERACTIVE scripts.\n    \n- ControlType - Required for question row, one of: INFO, RADIOBUTTON, CHECKBOX, DROPDOWNLIST, COMBOBOX, INPUTTEXT, TEXTAREA, DROPDOWNCHECKBOX\n    \n- DataType - Can only be used for COMBOBOX, INPUTTEXT or TEXTAREA control types, one of: TEXT, INTEGER, FLOATING, DATETIME, CURRENCY\n    \n- Prefill - Integer, max. number of answers.\n    \n- Mandatory - Is it mandatory to answer this question: 0 (no), 1 (yes).\n    \n- IsAmount - Is the answer used in amount calculations: 0 (no), 1 (yes).\n    \n- Width - View setting for question width in pixels.\n    \n- Height - View setting for question height in pixels.\n    \n\nFields for answer:\n\n- AnswerOrdinal - Required for answer row, identifies the answer within the previous question. The following question types can have answers: RADIOBUTTON, CHECKBOX, DROPDOWNLIST, COMBOBOX, DROPDOWNCHECKBOX\n    \n- Answer - Answer text.\n    \n- Amount - Float, can only be used if question IsAmount=1.\n    \n- Recording - Start recording: 0 (no), 1 (yes).\n    \n- NextQuestion - Next question ordinal in INTERACTIVE scripts.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Type;Remarks;LockFirstQuestion;Ordinal;Question;NextOrdinal;ControlType;DataType;Prefill;Mandatory;IsAmount;Width;Height;AnswerOrdinal;Answer;Amount;Recording;NextQuestion\nScript name;STATIC;;0;;;;;;;;;;;;;;;\n;;;;10;Question text;;CHECKBOX;;;0;0;;;;;;;\n;;;;;;;;;;;;;;1;Yes;;0;\n;;;;;;;;;;;;;;2;No;;0    \n\n ```"
								},
								{
									"name": "Skills",
									"item": [
										{
											"name": "POST New Skills",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/skills",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"skills"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates skills.\n\nFields:\n\n- Id - Can be used to update existing skill.\n    \n- Name - Required. If Id is not used, then ExternalName or Name will identify the skill.\n    \n- Description\n    \n- ExternalName - Can be used to identify the skill if Id is not used.\n    \n- Delete - Should be empty. Value 'D' will delete the skill.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Description;ExternalName\nSkill name;Skill description;\n\n ```"
								},
								{
									"name": "User Group Hierarchy",
									"item": [
										{
											"name": "POST New User Group Hierarchy",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/userGroupHierarchy",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"userGroupHierarchy"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that updates user group hierarchy.\n\nFields:\n\n- Name - Required, user group name.\n    \n- Description - User group description.\n    \n- Parent - Parent user group name. Can have multiple columns to have multiple parents.\n    \n- Role - Role names. Can have multiple columns to have multiple roles.\n    \n- Delete - Should be empty. Value 'D' will delete the user group.\n    \n\nOptional parameters (only possible to give in Configuration import):\n\n- REPLACE_ROLES - If 1, then other roles not included in this import will be removed from user group (by default 0). If there are no Role values included in this import, then no roles are removed.\n    \n- REPLACE_PARENTS - If 1, then other parents not included in this import will be removed from user group (by default 0). If there are no Parent values included in this import, then no parents are removed.\n    \n- CREATE_MISSING_GROUPS - If 1 (default), then user groups and roles not existing already in the system will be created.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nName;Description;Parent;Parent;Role;Role\nParent1name;Parent1description\nParent2name;Parent2description\nChild1Name;Child1description;Parent1Name;Parent2Name;Role1;Role2\nChild2Name;Child2description;Parent2Name;;Role2\nChild3Name;Child3description;Child1Name\n\n ```"
								},
								{
									"name": "Users",
									"item": [
										{
											"name": "POST New Users",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/import/users",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"import",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nCreates a new import job that adds or updates users.\n\nFields:\n\n- Id - Can be used to update existing user.\n    \n- ExternalId - Can be used to identify the user.\n    \n- Login - Login name for the user. Identifies the user if Id and ExternalId fields are empty.\n    \n- CRM - SAP CRM name for the user (uppercase).\n    \n- PresenceId - Presence ID for the user.\n    \n- UILanguage - User interface language, one of standard two letter system languages that can be seen in SC.\n    \n- PromptLanguage - Prompt language, can contain also custom languages defined in SC.\n    \n- FirstName - First name.\n    \n- Surname - Last name.\n    \n- TimeZone - Time zone like 'Europe/Helsinki'.\n    \n- Phone - Internal phone number, digits only.\n    \n- MobilePhone - External mobile phone number.\n    \n- Voicemail - Voicemail number.\n    \n- EMail - Email address.\n    \n- Chat - Chat address, must contain @ character.\n    \n- ChatName - Chat name shown to customers.\n    \n- Settings - User settings template.\n    \n- Role - Role for the user. There can be multiple Role columns.\n    \n- Skill - Skill and value for the user. Format: skill=value. If value is empty or 0, then skill is deleted from this user. There can be multiple Skill columns.\n    \n- Subject - Certificate subject. Certificates are identified by both subject and issuer. There can be multiple Subject columns.\n    \n- Issuer - Certificate issuer. There should be same amount of Issuer columns as Subject columns.\n    \n- Synchronised - 1 if this user should be synchronized to directory.\n    \n- ReportingGroup - Reporting group.\n    \n- UserGroup - User group. There can be multiple UserGroup columns.\n    \n- ForwardNumber - Personal forwarding number.\n    \n- DefaultQueue - Number of switchboard queue.\n    \n- Priority - Float.\n    \n- ExternalAgentNumber - External agent number.\n    \n- MaxCallsWaiting - Maximum number of waiting calls.\n    \n- Delete - Should be empty. Value 'D' will delete the user.\n    \n\nOptional parameters (possible to give in Configuration import):\n\n- REPLACEROLES - If 1, then other roles not included in this import will be removed from user (by default 0). If there are no Role values included in this import, then no roles are removed.\n    \n- REPLACE_USER_GROUPS - If 1, then other user groups not included in this import will be removed from user (by default 0). If there are no UserGroup values included in this import, then no user groups are removed.\n    \n- CREATE_MISSING_GROUPS - If 1 (default), then user groups and roles not existing already in the system will be created.\n    \n\nAn example of import file in semicolon-delimited text/csv format (.csv):\n\n```\nLogin;Surname;FirstName;TimeZone\nTest1;Last name;First name;Europe/Helsinki\n\n ```"
								}
							],
							"description": "StartFragmentImport supports .txt, .csv, .xls and .xlsx files. POSTing new import returns the job ID, which can be monitored using GET /RI/rci/jobs/ID. Files must have column names in the first line. Columns in .txt files are separated by tab and in .csv files by semicolon (;). If value contains separator character (or starts with \" character), then it must be quoted using \" characters (and \" characters in value must be doubled).EndFragment"
						},
						{
							"name": "Emergency Locations",
							"item": [
								{
									"name": "{emergencyLocationId}",
									"item": [
										{
											"name": "GET Emergency Location with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/emergencyLocations/{{emergencyLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"emergencyLocations",
														"{{emergencyLocationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Emergency Location with Id",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/emergencyLocations/{{emergencyLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"emergencyLocations",
														"{{emergencyLocationId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Emergency Locations",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/emergencyLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"emergencyLocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Emergency Location",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"string\",\r\n  \"type\": \"string\",\r\n  \"address\": {\r\n    \"streetNum\": \"string\",\r\n    \"streetName\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"postalCode\": \"string\",\r\n    \"callbackNumber\": \"string\"\r\n  },\r\n  \"details\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/emergencyLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"emergencyLocations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Emergency Locations",
							"item": [
								{
									"name": "{userEmergencyLocationId}",
									"item": [
										{
											"name": "GET User Emergency Location with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userEmergencyLocations/{{userEmergencyLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userEmergencyLocations",
														"{{userEmergencyLocationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE User Emergency Location with Id",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userEmergencyLocations/{{userEmergencyLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"userEmergencyLocations",
														"{{userEmergencyLocationId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET User Emergency Locations",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userEmergencyLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userEmergencyLocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New User Emergency Location",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"locationId\": \"string\",\r\n  \"userId\": \"string\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/userEmergencyLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"userEmergencyLocations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Call Switching Locations",
							"item": [
								{
									"name": "{callSwitchingLocationId}",
									"item": [
										{
											"name": "GET Call Switching Location with Id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/callSwitchingLocations/{{callSwitchingLocationId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rci}}",
													"path": [
														"callSwitchingLocations",
														"{{callSwitchingLocationId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Call Switching Locations",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rci}}/callSwitchingLocations",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rci}}",
											"path": [
												"callSwitchingLocations"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp20/api/RCI.html](https://docs.cc.sinch.com/onpremise/fp19/api/RCI.html)"
				},
				{
					"name": "Contact Management Interface",
					"item": [
						{
							"name": "Callbacks",
							"item": [
								{
									"name": "{callbackId}",
									"item": [
										{
											"name": "GET Callback with callbackId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callbacks/{{callbackId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"callbacks",
														"{{callbackId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Callback with callbackId",
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"customerNumber\": \"string\",\r\n    \"lastResult\": \"string\",\r\n    \"notes\": \"string\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callbacks/{{callbackId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"callbacks",
														"{{callbackId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Callbacks",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callbacks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"callbacks"
											],
											"query": [
												{
													"key": "customerNumber",
													"value": "05265710",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Callback",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n    \"customerNumber\": \"string\",\r\n    \"callbackQueueNumber\": \"string\",\r\n    \"notes\": \"string\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callbacks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"callbacks"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Call Recordings",
							"item": [
								{
									"name": "{callRecordingId}",
									"item": [
										{
											"name": "Listen Log",
											"item": [
												{
													"name": "GET Listen Log with callRecordingId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callRecordings/{{callRecordingId}}/listenLog",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"callRecordings",
																"{{callRecordingId}}",
																"listenLog"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST Listen Log with callRecordingId",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"description\": \"string\",\r\n    \"userSessionId\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callRecordings/{{callRecordingId}}/listenLog",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"callRecordings",
																"{{callRecordingId}}",
																"listenLog"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Call Recording with callRecordingId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callRecordings/{{callRecordingId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"callRecordings",
														"{{callRecordingId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Call Recordings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/callRecordings",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"callRecordings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Chats",
							"item": [
								{
									"name": "{chatId}",
									"item": [
										{
											"name": "GET Chat with chatId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/chats/{{chatId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"chats",
														"{{chatId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Chats",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/chats",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"chats"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Chat",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"originator\": \"string\",\r\n  \"destination\": \"string\",\r\n  \"from_queue\": {\r\n    \"id\": \"string\",\r\n    \"name\": \"string\"\r\n  },\r\n  \"title\": \"string\",\r\n  \"channel_type\": \"string\",\r\n  \"channel_sub_type\": \"string\",\r\n  \"participants\": [\r\n    {\r\n      \"alias\": \"string\",\r\n      \"uniquekey\": \"string\"\r\n    }\r\n  ],\r\n  \"transcript\": {\r\n    \"messages\": [\r\n      {\r\n        \"message\": \"string\",\r\n        \"originator\": \"string\",\r\n        \"timeStamp\": \"string\",\r\n        \"type\": \"string\"\r\n      }\r\n    ]\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/chats",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"chats"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Contacts",
							"item": [
								{
									"name": "{contactId}",
									"item": [
										{
											"name": "Remarks",
											"item": [
												{
													"name": "GET Contact Remarks",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}/remarks",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"remarks"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Remark",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}/remarks",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"remarks"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Remark",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}/remarks",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"remarks"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Details",
											"item": [
												{
													"name": "GET Details with contactId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}/details",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{cmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"details"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Contact with contactId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts/{{contactId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"contacts",
														"{{contactId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Contacts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contacts",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Emails",
							"item": [
								{
									"name": "{emailId}",
									"item": [
										{
											"name": "GET Email with emailId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/emails/{{emailId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"emails",
														"{{emailId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Emails",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/emails",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"emails"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Messages",
							"item": [
								{
									"name": "{messageId}",
									"item": [
										{
											"name": "GET Message with messageId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages/{{messageId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"messages",
														"{{messageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Message with messageId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages/{{messageId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"messages",
														"{{messageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Message with messageId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages/{{messageId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"messages",
														"{{messageId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Messages",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"messages"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Message",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"destinations\": {\r\n    \"destination\": [\r\n      {\r\n        \"address\": \"string\"\r\n      }\r\n    ]\r\n  },\r\n  \"message\": \"string\",\r\n  \"source\": \"string\",\r\n  \"subType\": \"string\",\r\n  \"contentType\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/messages",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"messages"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Script Results",
							"item": [
								{
									"name": "{scriptResultId}",
									"item": [
										{
											"name": "GET Script result with scriptResultId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/scriptResults/{{scriptResultId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"scriptResults",
														"{{scriptResultId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Scrip Results",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/scriptResults",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"scriptResults"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Script Result",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"script_id\": \"string\",\r\n  \"contact_id\": \"string\",\r\n  \"scriptquestions\": [\r\n    {\r\n      \"id\": \"string\",\r\n      \"scriptanswers\": [\r\n        {\r\n          \"id\": \"string\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"id\": \"string\",\r\n      \"scriptanswers\": [\r\n        {\r\n          \"answerdata\": \"string\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/scriptResults",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"scriptResults"
											]
										},
										"description": "StartFragment\n\nAdds or updates script results for the given contact. Script, question and answer Ids must be fetched first using\n\n```\nGET /RI/rci/scripts (returns the list of scripts in system)\nGET /RI/rci/scripts/:id (returns the details of one script, including questions and answers)\n\n ```\n\nRequired fields:\n\n- contact_id - User needs to have MANAGE_CONTACTS right for the contact queue or contact agent.\n    \n- script_id - Script Id.\n    \n- question.id - Question Id. The given _question.data_ is ignored.\n    \n- answer.id - Required when question control type is one of: RADIOBUTTON, CHECKBOX, DROPDOWNLIST, DROPDOWNCHECKBOX, COMBOBOX. In these cases the given _answerdata_ is ignored.\n    \n- answer.answerdata - Required when _answer.id_ is not used, with free text control types: INPUTTEXT, TEXTAREA, COMBOBOX.\n    \n\nIf script has any mandatory questions, then there needs to be answer to such question."
									},
									"response": []
								}
							]
						},
						{
							"name": "Contact Data",
							"item": [
								{
									"name": "{contactId}",
									"item": [
										{
											"name": "GET Contact Data with contactId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contactData/{{contactId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"contactData",
														"{{contactId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Contact Data",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contactData",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"contactData"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Contact Data",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"string\",\r\n    \"attachedData\": \"{\\\"CustomData\\\": \\\"Test\\\", \\\"CustomData2\\\": \\\"Test2\\\"}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/contactData",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"contactData"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Customer Consents",
							"item": [
								{
									"name": "{usage}_{address}",
									"item": [
										{
											"name": "GET Customer Consent with usage and address",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/customerConsents/{{usage}}_{{address}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"customerConsents",
														"{{usage}}_{{address}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Customer Consent with usage and address Copy",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/customerConsents/{{usage}}_{{address}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{cmi}}",
													"path": [
														"customerConsents",
														"{{usage}}_{{address}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Customer Consents",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/customerConsents",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"customerConsents"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Customer Consent",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"string\",\r\n    \"usage\": \"string\",\r\n    \"consent\": true\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/customerConsents",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"customerConsents"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "S3 Attachments",
							"item": [
								{
									"name": "POST New Signed Link for uploading attachments",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"mimeType\": \"text/plain\",\r\n    \"fileName\": \"string\",\r\n    \"fileSize\": 5839\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{cmi}}/s3attachments",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{cmi}}",
											"path": [
												"s3attachments"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp20/api/CMI.html](https://docs.cc.sinch.com/onpremise/fp19/api/CMI.html)"
				},
				{
					"name": "Directory and Presence Interface",
					"item": [
						{
							"name": "Entries",
							"item": [
								{
									"name": "{entryId}",
									"item": [
										{
											"name": "Groups",
											"item": [
												{
													"name": "GET Entry Groups",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}/groups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{dpi}}",
															"path": [
																"entries",
																"{{entryId}}",
																"groups"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Entry Group",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\": \"string\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}/groups",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{dpi}}",
															"path": [
																"entries",
																"{{entryId}}",
																"groups"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Entry with entryId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{dpi}}",
													"path": [
														"entries",
														"{{entryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Entry with entryId",
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"EBDE6180803B4F7798451E3742EE89A3\",\r\n    \"accessType\": 15,\r\n    \"attrs\": [\r\n        {\r\n            \"id\": \"02302610CE78413CB62D5EF7A067A6A4\",\r\n            \"language\": \"EN\",\r\n            \"value\": \"05265710\"\r\n        },\r\n        {\r\n            \"id\": \"CEF4CED0F14D462C85B4976068DC9974\",\r\n            \"language\": \"EN\",\r\n            \"value\": \"EST\"\r\n        },\r\n\t\t{\r\n\t\t\t\"id\": \"C3418D0465A8476CA0DD0FAF536AD6D8\",\r\n\t\t\t\"language\": \"EN\",\r\n\t\t\t\"value\": \"2023-08-20\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": \"DBA695A0442F479B831AB2B09546DB76\",\r\n\t\t\t\"language\": \"EN\",\r\n\t\t\t\"value\": \"2023-08-20\"\r\n\t\t}\r\n    ],\r\n    \"groups\": [\r\n        {\r\n            \"id\": \"9C42B2C705B94410B781F770B22386E0\",\r\n            \"name\": \"External Customer\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{dpi}}",
													"path": [
														"entries",
														"{{entryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Entry with entryId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{dpi}}",
													"path": [
														"entries",
														"{{entryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Entries",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"entries"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST New Entry",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"attrs\": [\r\n    {\r\n      \"id\": \"string\",\r\n      \"language\": \"EN\",\r\n      \"value\": \"Entry name\"\r\n    },\r\n    {\r\n      \"id\": \"string\",\r\n      \"language\": \"EN\",\r\n      \"value\": \"email@address.com\"\r\n    }\r\n  ],\r\n  \"groups\": [\r\n    {\r\n      \"id\": \"string\",\r\n      \"name\": \"Directory group name\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"entries"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Groups",
							"item": [
								{
									"name": "GET Groups",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/groups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"groups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Template",
							"item": [
								{
									"name": "GET Template",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/template",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"template"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Entry Details",
							"item": [
								{
									"name": "GET Entry Details",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{dpi}}/entries/{{entryId}}/entryDetails",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{dpi}}",
											"path": [
												"entries",
												"{{entryId}}",
												"entryDetails"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp20/api/DPI.html](https://docs.cc.sinch.com/onpremise/fp19/api/DPI.html)"
				},
				{
					"name": "License Reporting Interface",
					"item": [
						{
							"name": "Contact",
							"item": [
								{
									"name": "GET Contacts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{lri}}/contact",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{lri}}",
											"path": [
												"contact"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Data",
							"item": [
								{
									"name": "GET Data",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{lri}}/data",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{lri}}",
											"path": [
												"data"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Report",
							"item": [
								{
									"name": "GET Report",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{lri}}/report",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{lri}}",
											"path": [
												"report"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp20/api/LRI.html](https://docs.cc.sinch.com/onpremise/fp19/api/LRI.html)"
				},
				{
					"name": "Monitoring Interface",
					"item": [
						{
							"name": "Agents",
							"item": [
								{
									"name": "{agentId}",
									"item": [
										{
											"name": "Presences",
											"item": [
												{
													"name": "GET Presence ID with agentId",
													"item": [
														{
															"name": "GET Presence ID with agentId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/presence/{{presenceId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rmi}}",
																	"path": [
																		"agents",
																		"{{agentId}}",
																		"presence",
																		"{{presenceId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update Presence with AgentId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/presence/{{presenceId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rmi}}",
																	"path": [
																		"agents",
																		"{{agentId}}",
																		"presence",
																		"{{presenceId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Presence Profiles with agentId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/presences",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"agents",
																"{{agentId}}",
																"presences"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Queues",
											"item": [
												{
													"name": "{queueId}",
													"item": [
														{
															"name": "GET Queue ID with agentId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/queues/{{queueId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rmi}}",
																	"path": [
																		"agents",
																		"{{agentId}}",
																		"queues",
																		"{{queueId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update Queue with agentId",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/queues/{{queueId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{rmi}}",
																	"path": [
																		"agents",
																		"{{agentId}}",
																		"queues",
																		"{{queueId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "GET Queues with agentId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/queues",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"agents",
																"{{agentId}}",
																"queues"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Ready State",
											"item": [
												{
													"name": "GET Ready State with agentId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/readyState",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"agents",
																"{{agentId}}",
																"readyState"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Ready State with agentId",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}/readyState",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"agents",
																"{{agentId}}",
																"readyState"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Agent with agentId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents/{{agentId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"agents",
														"{{agentId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Agents",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/agents",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"agents"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Contact Summaries",
							"item": [
								{
									"name": "{contactSummariesId}",
									"item": [
										{
											"name": "GET Contact Summary with contactSummariesId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contactSummaries/{{contactSummaryId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"contactSummaries",
														"{{contactSummaryId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Contact Summaries",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contactSummaries",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"contactSummaries"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Contacts",
							"item": [
								{
									"name": "{contactId}",
									"item": [
										{
											"name": "Details",
											"item": [
												{
													"name": "GET Contact Details with contactId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contacts/{{contactId}}/details",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"details"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Event",
											"item": [
												{
													"name": "POST New Event withcontactId",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"event\": \"string\",\r\n    \"reason\": \"string\"\r\n}"
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contacts/{{contactId}}/event",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{rmi}}",
															"path": [
																"contacts",
																"{{contactId}}",
																"event"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Contact with contactId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contacts/{{contactId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"contacts",
														"{{contactId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Contacts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/contacts",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queue Groups",
							"item": [
								{
									"name": "{queueGroupId}",
									"item": [
										{
											"name": "GET Queue Group ID with queueGroupId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/queueGroups/{{queueGroupId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"queueGroups",
														"{{queueGroupId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Queue Groups",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/queueGroups",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"queueGroups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queue Statuses",
							"item": [
								{
									"name": "{queueId}",
									"item": [
										{
											"name": "GET Queue Status with queueId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/queueStatuses/{{queueId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"queueStatuses",
														"{{queueId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Queue Statuses",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/queueStatuses",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"queueStatuses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Settings",
							"item": [
								{
									"name": "{settingsId}",
									"item": [
										{
											"name": "GET Settings with settingsId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/settings/{{settingsId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"settings",
														"{{settingsId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Settings with settingsId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/settings/{{settingsId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"settings",
														"{{settingsId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Settings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/settings",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Settings",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"string\",\r\n  \"uiLanguage\": \"string\",\r\n  \"value\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/settings",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"settings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Statuses",
							"item": [
								{
									"name": "{userId}",
									"item": [
										{
											"name": "GET User Status with userId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/userStatuses/{{userId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rmi}}",
													"path": [
														"userStatuses",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET User Statuses",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rmi}}/userStatuses",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rmi}}",
											"path": [
												"userStatuses"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp20/api/RMI.html](https://docs.cc.sinch.com/onpremise/fp19/api/RMI.html)"
				},
				{
					"name": "Outbound Campaign Interface",
					"item": [
						{
							"name": "Campaigns",
							"item": [
								{
									"name": "{campaignId}",
									"item": [
										{
											"name": "Customers",
											"item": [
												{
													"name": "{customerId}",
													"item": [
														{
															"name": "GET Customer with customerId",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers/{{customerId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{obi}}",
																	"path": [
																		"campaigns",
																		"{{campaignId}}",
																		"customers",
																		"{{customerId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "DELETE Customer from Campaign",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers/{{customerId}}",
																	"host": [
																		"{{protocol}}{{url}}"
																	],
																	"port": "{{port}}{{obi}}",
																	"path": [
																		"campaigns",
																		"{{campaignId}}",
																		"customers",
																		"{{customerId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Get Customers with campaignId",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{obi}}",
															"path": [
																"campaigns",
																"{{campaignId}}",
																"customers"
															]
														}
													},
													"response": []
												},
												{
													"name": "POST New Customer",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"attributes\": {\r\n    \"attribute\": [\r\n      {\r\n        \"name\": \"string\",\r\n        \"value\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"string\",\r\n        \"value\": \"string\"\r\n      }\r\n    ]\r\n  },\r\n  \"externalId\": \"string\",\r\n  \"numbers\": \"string\",\r\n  \"timeZone\": \"string\"\r\n}"
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{obi}}",
															"path": [
																"campaigns",
																"{{campaignId}}",
																"customers"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Status",
											"item": [
												{
													"name": "Set Campaign Status",
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "Active"
														},
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/status",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{obi}}",
															"path": [
																"campaigns",
																"{{campaignId}}",
																"status"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "List",
											"item": [
												{
													"name": "POST New Customers to Campaign with Id",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customers/list",
															"host": [
																"{{protocol}}{{url}}"
															],
															"port": "{{port}}{{obi}}",
															"path": [
																"campaigns",
																"{{campaignId}}",
																"customers",
																"list"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET Campaign with campaignId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{obi}}",
													"path": [
														"campaigns",
														"{{campaignId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Customer Result Statistics with campaignId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}/customerResultStatistics",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{obi}}",
													"path": [
														"campaigns",
														"{{campaignId}}",
														"customerResultStatistics"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Campaign with campaignId",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns/{{campaignId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{obi}}",
													"path": [
														"campaigns",
														"{{campaignId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Campaigns",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/campaigns",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{obi}}",
											"path": [
												"campaigns"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Statistics",
							"item": [
								{
									"name": "GET Statistics",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{obi}}/statistics",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{obi}}",
											"path": [
												"statistics"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp20/api/OBI.html](https://docs.cc.sinch.com/onpremise/fp19/api/OBI.html)"
				},
				{
					"name": "Taskmanager Interface",
					"item": [
						{
							"name": "Tasks",
							"item": [
								{
									"name": "Count",
									"item": [
										{
											"name": "GET Task count",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks/count",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rti}}",
													"path": [
														"tasks",
														"count"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "{taskId}",
									"item": [
										{
											"name": "GET Task with ID",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks/{{taskId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rti}}",
													"path": [
														"tasks",
														"{{taskId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Task with ID",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks/{{taskId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rti}}",
													"path": [
														"tasks",
														"{{taskId}}"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE Task with ID",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks/{{taskId}}",
													"host": [
														"{{protocol}}{{url}}"
													],
													"port": "{{port}}{{rti}}",
													"path": [
														"tasks",
														"{{taskId}}"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "tasks",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rti}}",
											"path": [
												"tasks"
											],
											"query": [
												{
													"key": "status",
													"value": "Open",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "XRI Task",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"data\":{\r\n\t\"item\":{\r\n\t\t\"type\":\"XRI\",\r\n\t\t\"queue\":\"47206108A1704DC29CEA7B7F7B19463F\"\r\n\t\t},\r\n\t\t\t\"subject\":\"Alder testib POSTi\",\r\n\t\t\t\"body\":\"Simple XRI Task\",\r\n\t\t\t\"fromAddress\":\"alder.tsvetkov@telia.ee\"\r\n\t\t}\r\n}"
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rti}}",
											"path": [
												"tasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "EMAIL Task",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"data\":{\r\n\t\"item\":{\r\n\t\t\"type\":\"EMAIL\",\r\n\t\t\"queue\":\"556F17F92D04493AB38B58CDF372E6F7\"\r\n\t\t},\r\n\t\t\t\"subject\":\"Alder testib POSTi\",\r\n\t\t\t\"body\":\"Simple E-mail Task\",\r\n\t\t\t\"fromAddress\":\"alder.tsvetkov@telia.ee\"\r\n\t\t}\r\n}"
										},
										"url": {
											"raw": "{{protocol}}{{url}}:{{port}}{{rti}}/tasks",
											"host": [
												"{{protocol}}{{url}}"
											],
											"port": "{{port}}{{rti}}",
											"path": [
												"tasks"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://docs.cc.sinch.com/onpremise/fp20/api/RTI.html](https://docs.cc.sinch.com/onpremise/fp19/api/RTI.html)"
				}
			],
			"description": "[https://docs.cc.sinch.com/onpremise/fp20/api.html](https://docs.cc.sinch.com/onpremise/fp20/api.html)"
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{pwd}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{uid}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string"
		},
		{
			"key": "port",
			"value": "",
			"type": "string"
		},
		{
			"key": "protocol",
			"value": "https://",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "restint",
			"type": "string"
		},
		{
			"key": "pwd",
			"value": "intrest",
			"type": "string"
		},
		{
			"key": "obi",
			"value": "/RI/obi",
			"type": "string"
		},
		{
			"key": "rai",
			"value": "/RI/rai",
			"type": "string"
		},
		{
			"key": "rci",
			"value": "/RI/rci",
			"type": "string"
		},
		{
			"key": "lri",
			"value": "/RI/lri",
			"type": "string"
		},
		{
			"key": "cmi",
			"value": "/RI/cmi",
			"type": "string"
		},
		{
			"key": "rmi",
			"value": "/RI/rmi",
			"type": "string"
		},
		{
			"key": "dpi",
			"value": "/RI/dpi",
			"type": "string"
		},
		{
			"key": "rti",
			"value": "/RI/rti",
			"type": "string"
		},
		{
			"key": "address",
			"value": "",
			"type": "string"
		},
		{
			"key": "agentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "attachmentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "audioPromptId",
			"value": "",
			"type": "string"
		},
		{
			"key": "authenticationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "callbackId",
			"value": "",
			"type": "string"
		},
		{
			"key": "callRecordingId",
			"value": "",
			"type": "string"
		},
		{
			"key": "callSwitchingLocationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "campaignId",
			"value": "",
			"type": "string"
		},
		{
			"key": "certificateId",
			"value": "",
			"type": "string"
		},
		{
			"key": "chatId",
			"value": "",
			"type": "string"
		},
		{
			"key": "cpExtensionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "contactId",
			"value": "",
			"type": "string"
		},
		{
			"key": "contactSummaryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "customerId",
			"value": "",
			"type": "string"
		},
		{
			"key": "customIvrId",
			"value": "",
			"type": "string"
		},
		{
			"key": "disruptionSetId",
			"value": "",
			"type": "string"
		},
		{
			"key": "emailId",
			"value": "",
			"type": "string"
		},
		{
			"key": "emergencyLocationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "endTime",
			"value": "",
			"type": "string"
		},
		{
			"key": "entryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "extensionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "itemId",
			"value": "",
			"type": "string"
		},
		{
			"key": "jobId",
			"value": "",
			"type": "string"
		},
		{
			"key": "messageId",
			"value": "",
			"type": "string"
		},
		{
			"key": "messagingServiceId",
			"value": "",
			"type": "string"
		},
		{
			"key": "presenceId",
			"value": "",
			"type": "string"
		},
		{
			"key": "prsProfileId",
			"value": "",
			"type": "string"
		},
		{
			"key": "queueId",
			"value": "",
			"type": "string"
		},
		{
			"key": "queueGroupId",
			"value": "",
			"type": "string"
		},
		{
			"key": "replyTemplateId",
			"value": "",
			"type": "string"
		},
		{
			"key": "roleId",
			"value": "",
			"type": "string"
		},
		{
			"key": "settingsId",
			"value": "",
			"type": "string"
		},
		{
			"key": "scriptId",
			"value": "",
			"type": "string"
		},
		{
			"key": "scriptResultId",
			"value": "",
			"type": "string"
		},
		{
			"key": "skillId",
			"value": "",
			"type": "string"
		},
		{
			"key": "sourceCodeId",
			"value": "",
			"type": "string"
		},
		{
			"key": "startTime",
			"value": "",
			"type": "string"
		},
		{
			"key": "taskId",
			"value": "",
			"type": "string"
		},
		{
			"key": "timeZoneId",
			"value": "",
			"type": "string"
		},
		{
			"key": "usage",
			"value": "",
			"type": "string"
		},
		{
			"key": "userEmergencyLocationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userGroupId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userSettingsTemplateId",
			"value": "",
			"type": "string"
		}
	]
}